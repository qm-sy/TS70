C51 COMPILER V9.60.7.0   GUI_CTRL                                                          10/16/2025 17:12:36 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE GUI_CTRL
OBJECT MODULE PLACED IN ..\Output\gui_ctrl.obj
COMPILER INVOKED BY: D:\APP\KEIL\MDK\C51\BIN\C51.EXE ..\Emembed\Src\gui_ctrl.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\
                    -BSP\Inc;..\Core\Inc;..\Driver;..\SYSTEM;..\Emembed\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\gui_ctrl.lst) TABS(2) OBJECT
                    -(..\Output\gui_ctrl.obj)

line level    source

   1          #include "gui_ctrl.h"
   2          
   3          SP350 sp350;
   4          HANSEN hansen;
   5          DAYIN_T dayin_t;
   6          
   7          void sp350_parms_init( void )
   8          {
   9   1          sp350.alarm_tempF = 50;         
  10   1          sp350.alarm_tempM = 55;         
  11   1          sp350.alarm_tempR = 60;         
  12   1          sp350.F_switch    = 1;          
  13   1          sp350.M_switch    = 1;          
  14   1          sp350.R_switch    = 1;          
  15   1          sp350.LED_switch  = 1;          
  16   1          sp350.fan_switch  = 1;         
  17   1          sp350.fan_level   = 1;
  18   1      
  19   1          sys_write_vp(0x2010,(uint8_t*)&sp350.alarm_tempF,1);
  20   1          sys_write_vp(0x2011,(uint8_t*)&sp350.alarm_tempM,1);
  21   1          sys_write_vp(0x2012,(uint8_t*)&sp350.alarm_tempR,1);
  22   1      
  23   1          sys_write_vp(0x2013,(uint8_t*)&sp350.F_switch,1);
  24   1          sys_write_vp(0x2014,(uint8_t*)&sp350.M_switch,1);
  25   1          sys_write_vp(0x2015,(uint8_t*)&sp350.R_switch,1);
  26   1      
  27   1          sys_write_vp(0x2016,(uint8_t*)&sp350.LED_switch,1);
  28   1      
  29   1          sys_write_vp(0x2017,(uint8_t*)&sp350.fan_switch,1);
  30   1          sys_write_vp(0x201a,(uint8_t*)&sp350.fan_level,1);
  31   1      }
  32          
  33          void diwen_parms_init( void )
  34          {
  35   1          hansen.ctrl_flag = 0;
  36   1          hansen.connect_flag = 0;
  37   1          hansen.addr_0x00 = 0x00;
  38   1          hansen.addr_0x02 = 0x00;
  39   1          hansen.addr_0x06 = 0x0149;
  40   1          hansen.addr_0x10 = 0x1f;
  41   1          hansen.addr_0x20 = 0x00;
  42   1          hansen.addr_0x21 = 0x00;
  43   1          hansen.addr_0x22 = 0x00;
  44   1          hansen.addr_0x23 = 0x00;
  45   1          hansen.addr_0x2d = 0x00;
  46   1          hansen.addr_0x30 = 0x00;
  47   1          hansen.addr_0x0c = 0x01;
  48   1      
  49   1          hansen.paoji_flag = hansen.paoji_send = 0;
  50   1          hansen.paoji_h = hansen.paoji_min = hansen.paoji_s = 0;
  51   1          jump_page(12);
  52   1      }
  53          
C51 COMPILER V9.60.7.0   GUI_CTRL                                                          10/16/2025 17:12:36 PAGE 2   

  54          void gui_vol_ctrl( uint16_t addr, uint8_t val_H, uint8_t val_L)
  55          {
  56   1          uint8_t val_tab[2] = {0};
  57   1          uint8_t utf_tab[4] = {0XBA,0XDA,0XD4,0XB2};
  58   1          uint8_t i = 0;
  59   1          static uint8_t addr_20a0 = 0;
  60   1      
  61   1          switch ( addr )
  62   1          {   
  63   2              /*      0x20 马达复位：置1后开始复位，等待被置0        */
  64   2              /*      0x20 跑机操作：置1后开始复位，等待被置0        */
  65   2              /*      0x20 点动操作：置1一直移动，写0后停止移动      */
  66   2              /*      0x20 bit0  x马达复位     */
  67   2              /*      0x20 bit3  左移          */
  68   2              /*      0x20 bit4  右移          */
  69   2              /*      0x20 bit5  进料          */
  70   2              /*      0x20 bit6  退料          */
  71   2              /*      0x20 bit9  开始跑机      */
  72   2              /*      0x20 bit13  停止跑机     */
  73   2              case 0x2020:
  74   2                  hansen.addr_0x20 = (val_H << 8) |  val_L;
  75   2                  
  76   2                  break;
  77   2      
  78   2              case 0x2021:
  79   2                  hansen.addr_0x21 = (val_H << 8) |  val_L;
  80   2                  
  81   2                  break;
  82   2      
  83   2              case 0x2022:
  84   2                  hansen.addr_0x22 = (val_H << 8) |  val_L;
  85   2                  if( hansen.addr_0x22 == 3 )
  86   2                  {
  87   3                      hansen.addr_0x22 = 4;
  88   3                  }
  89   2                  
  90   2                  break;   
  91   2      
  92   2              case 0x2023:
  93   2                  hansen.addr_0x23 = (val_H << 8) |  val_L;
  94   2                  
  95   2                  break;
  96   2      
  97   2              case 0x2030:
  98   2                  hansen.addr_0x30 = (val_H << 8) |  val_L;
  99   2                  
 100   2                  break;
 101   2      
 102   2              case 0x2051:
 103   2                  hansen.addr_0x06 &= ~0x07;
 104   2                  switch (val_L)
 105   2                  {
 106   3                      case 1: hansen.addr_0x06 |= 0x01;       break;
 107   3                      case 2: hansen.addr_0x06 |= 0x02;       break;
 108   3                      case 3: hansen.addr_0x06 |= 0x04;       break;
 109   3                      default:                                break;
 110   3                  }
 111   2                  
 112   2                  break;
 113   2      
 114   2              case 0x2052:
 115   2                  hansen.addr_0x06 &= ~0x38;
C51 COMPILER V9.60.7.0   GUI_CTRL                                                          10/16/2025 17:12:36 PAGE 3   

 116   2                  switch (val_L)
 117   2                  {
 118   3                      case 1: hansen.addr_0x06 |= 0x08;       break;
 119   3                      case 2: hansen.addr_0x06 |= 0x10;       break;
 120   3                      case 3: hansen.addr_0x06 |= 0x20;       break;
 121   3                      default:                                break;
 122   3                  }
 123   2                  
 124   2                  break;
 125   2      
 126   2              case 0x2053:
 127   2                  hansen.addr_0x06 &= ~0xC0;
 128   2                  switch (val_L)
 129   2                  {
 130   3                      case 1: hansen.addr_0x06 |= 0x40;       break;
 131   3                      case 2: hansen.addr_0x06 |= 0x80;       break;
 132   3                      case 3: hansen.addr_0x06 |= 0xc0;       break;
 133   3                      default:                                break;
 134   3                  }
 135   2                  
 136   2                  break;
 137   2      
 138   2              case 0x2054:
 139   2                  hansen.addr_0x06 &= ~0x0700;
 140   2                  switch (val_L)
 141   2                  {
 142   3                      case 1: hansen.addr_0x06 |= 0x0100;     break;
 143   3                      case 2: hansen.addr_0x06 |= 0x0200;     break;
 144   3                      case 3: hansen.addr_0x06 |= 0x0400;     break;
 145   3                      default:                                break;
 146   3                  }
 147   2                  
 148   2                  break;
 149   2      
 150   2              case 0x2055:
 151   2                  hansen.addr_0x06 &= ~0x1800;
 152   2                  switch (val_L)
 153   2                  {
 154   3                      case 0: hansen.addr_0x06 |= 0x0000;     break;
 155   3                      case 1: hansen.addr_0x06 |= 0x0800;     break;
 156   3                      case 2: hansen.addr_0x06 |= 0x1000;     break;
 157   3                      case 3: hansen.addr_0x06 |= 0x1800;     break;
 158   3                      default:                                break;
 159   3                  }
 160   2                  
 161   2                  break;
 162   2      
 163   2              case 0x2060:
 164   2                  hansen.addr_0x00 = (val_H << 8) |  val_L;
 165   2                  
 166   2                  break;
 167   2      
 168   2              case 0x2062:
 169   2                  hansen.addr_0x02 = (val_H << 8) |  val_L;
 170   2                  
 171   2                  break;
 172   2      
 173   2              case 0x2033:
 174   2      
 175   2                  Write_Dgusii_Vp_byChar(0x20c0,utf_tab,4);
 176   2      
 177   2                  break;
C51 COMPILER V9.60.7.0   GUI_CTRL                                                          10/16/2025 17:12:36 PAGE 4   

 178   2      
 179   2              case 0x2090:
 180   2                  addr_20a0 = 0;
 181   2                  break;
 182   2      
 183   2              case 0x2098:
 184   2                  if( mima_val == 222222 )
 185   2                  {
 186   3                      jump_page(10);
 187   3                      mima_val = 0;
 188   3                      Write_Dgus(0x2090,0x01);
 189   3                      Write_Dgus(0x2091,0xe240);
 190   3                  } 
 191   2                 
 192   2                  break;
 193   2      
 194   2              case 0x20a0:
 195   2                  if( val_L == 1 ) 
 196   2                  {
 197   3                      hansen.addr_0x20 = 0x0200;
 198   3                      hansen.paoji_flag = 1;
 199   3                  }else
 200   2                  {
 201   3                      hansen.addr_0x20 = 0x2000;
 202   3                      Write_Dgus(0x20a4,0);
 203   3                      Write_Dgus(0x20a3,0);
 204   3                      Write_Dgus(0x20a2,0);
 205   3                      jump_page(0);
 206   3                      hansen.paoji_flag = 0;
 207   3                  }  
 208   2                  addr_20a0 = val_L;
 209   2      
 210   2                  break;
 211   2      
 212   2              case 0x20d6:
 213   2                  if( val_L == 4 )
 214   2                  {
 215   3                      hansen.addr_0x2d = 3;    
 216   3                  }
 217   2                  if( val_L == 3 )
 218   2                  {
 219   3                      hansen.addr_0x2d = 4;    
 220   3                  }
 221   2                  break;
 222   2      
 223   2              case 0x20d7:
 224   2                  hansen.addr_0x2d = val_L;
 225   2                  break;  
 226   2      
 227   2              case 0x20d8:
 228   2                  hansen.addr_0x2d = val_L;
 229   2                  jump_page(0);
 230   2                  break;
 231   2      
 232   2              case 0x20a1:
 233   2                  if( addr_20a0 == 0 )
 234   2                  jump_page(0);
 235   2                  break;
 236   2              /*          40001 设置alarm_tempF(val_L) alarm_tempM(val_H)          */
 237   2              case 0x2010:
 238   2                  sp350.alarm_tempF = val_L;
 239   2                  write_slave_06(UART_5,ALARM_TEMP12_ADDR,(uint8_t)sp350.alarm_tempM,(uint8_t)sp350.alarm_tempF)
C51 COMPILER V9.60.7.0   GUI_CTRL                                                          10/16/2025 17:12:36 PAGE 5   

             -;  
 240   2      
 241   2                  break;
 242   2              
 243   2              case 0x2011:
 244   2                  sp350.alarm_tempM = val_L;
 245   2                  write_slave_06(UART_5,ALARM_TEMP12_ADDR,(uint8_t)sp350.alarm_tempM,(uint8_t)sp350.alarm_tempF)
             -;   
 246   2      
 247   2                  break;
 248   2      
 249   2              case 0x2012:
 250   2                  sp350.alarm_tempR = val_L;
 251   2                  write_slave_06(UART_5,ALARM_TEMP3_ADDR,0,(uint8_t)sp350.alarm_tempR);  
 252   2                  
 253   2                  break;
 254   2      
 255   2               
 256   2              /*          40002 设置 F\M\R  Switch                                 */
 257   2              case 0x2013:
 258   2                  sp350.F_switch = val_L;
 259   2                  write_slave_06(UART_5,FM_SWITCH_ADDR,(uint8_t)sp350.M_switch,(uint8_t)sp350.F_switch);  
 260   2      
 261   2                  break;
 262   2              
 263   2              case 0x2014:
 264   2                  sp350.M_switch = val_L;
 265   2                  write_slave_06(UART_5,FM_SWITCH_ADDR,(uint8_t)sp350.M_switch,(uint8_t)sp350.F_switch); 
 266   2      
 267   2                  break;
 268   2      
 269   2              case 0x2015:
 270   2                  sp350.R_switch = val_L;
 271   2                  write_slave_06(UART_5,R_SWITCH_ADDR,0,(uint8_t)sp350.R_switch); 
 272   2      
 273   2                  break;
 274   2      
 275   2              case 0x2016:
 276   2                  sp350.LED_switch = val_L;
 277   2                  write_slave_06(UART_5,LED_SWITCH_ADDR,0,(uint8_t)sp350.LED_switch); 
 278   2      
 279   2                  break;
 280   2      
 281   2              case 0x2017:
 282   2                  sp350.fan_switch = val_L;
 283   2                  write_slave_06(UART_5,LED_SWITCH_ADDR,(uint8_t)sp350.fan_switch,(uint8_t)sp350.fan_level); 
 284   2      
 285   2                  break; 
 286   2      
 287   2              case 0x3018:
 288   2                  sp350.fan_level = val_L;
 289   2                  write_slave_06(UART_5,FAN_ADDR,(uint8_t)sp350.fan_switch,(uint8_t)sp350.fan_level); 
 290   2      
 291   2                  break; 
 292   2      
 293   2              default:
 294   2                  break;
 295   2          }
 296   1      }
 297          
 298          
 299          void jump_page( uint8_t page_num )
C51 COMPILER V9.60.7.0   GUI_CTRL                                                          10/16/2025 17:12:36 PAGE 6   

 300          {
 301   1          Write_Dgus(0x0085,page_num);
 302   1      
 303   1          Write_Dgus(0x0084,0x5A01);
 304   1      }
 305          
 306          void time_trans( uint16_t time_val ,uint8_t num )
 307          {
 308   1          if( num == 0 )
 309   1          {
 310   2              dayin_t.cnt_h = time_val / 3600;
 311   2              dayin_t.cnt_min = (time_val % 3600) / 60;
 312   2              dayin_t.cnt_s = time_val % 60;
 313   2          }else
 314   1          {
 315   2              dayin_t.remain_h = time_val / 3600;
 316   2              dayin_t.remain_min = (time_val % 3600) / 60;
 317   2              dayin_t.remain_s = time_val % 60;
 318   2          }
 319   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1573    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =    131      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
