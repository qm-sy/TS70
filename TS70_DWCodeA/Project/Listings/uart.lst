C51 COMPILER V9.60.7.0   UART                                                              10/15/2025 21:46:45 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN ..\Output\uart.obj
COMPILER INVOKED BY: D:\APP\KEIL\MDK\C51\BIN\C51.EXE ..\Core\Src\uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BSP\Inc
                    -;..\Core\Inc;..\Driver;..\SYSTEM;..\Emembed\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\uart.lst) TABS(2) OBJECT(..\Output\
                    -uart.obj)

line level    source

   1          #include "uart.h"
   2          
   3          uint8_t  xdata R_u2[UART2_RX_LENTH];  //串口2接受数组
   4          uint8_t  xdata R_OD2;             //串口2收到数据
   5          uint16_t xdata R_CN2;           //串口2长度计数器
   6          uint8_t  xdata T_O2;            //串口2超时计数器
   7          bit        Busy2;             //串口2发送标志
   8          
   9          bit        Busy4;             //串口2发送标志
  10          
  11          bit        Response_flog;       //应答用
  12          bit        Auto_data_upload;    //数据自动上传用
  13          bit        Crc_check_flog;      //Crc校验标记
  14          bit        download_flag;     //串口2通讯与下载区分标志位
  15          
  16          uint32_t mima_val = 0;
  17          
  18          void burn_params_init( void )
  19          {
  20   1        R_OD2 = 0;
  21   1        R_CN2 = 0;
  22   1        T_O2  = 0;
  23   1        Busy2 = 0;
  24   1        Busy4 = 0;
  25   1        Response_flog    = 0;
  26   1        Auto_data_upload = 0;
  27   1        Crc_check_flog   = 0;
  28   1        download_flag    = 1;
  29   1      }
  30          
  31          void Uart2_Init( uint32_t baud )
  32          {
  33   1          MUX_SEL |= 0X40;        //[6] = 1 时，IO口 P0.4、P0.5作为uart2接口
  34   1      
  35   1      
  36   1          SCON0 = 0x50;           //uart2控制接口，SM1 = 1, REN0 = 1;
  37   1          ADCON = 0x80;           //波特率发生器选择  0x00=T1 定时器，0x80=使用 SREL0H:L。
  38   1          PCON &= 0x7f;           //[7] = 1 时，波特率倍频 为0则不倍频
  39   1      
  40   1          baud = 1024 - FOSC / 64 / baud;
  41   1      
  42   1          SREL0H = (uint8_t)(baud>>8);
  43   1          SREL0L = (uint8_t)baud;
  44   1      
  45   1          ES0 = 1;                //uart2 中断开启
  46   1      }
  47          
  48          void Uart4_Init( uint32_t baud )
  49          {
  50   1        SCON2T= 0x80;       //发送使能和模式设置
  51   1        SCON2R= 0x80;       //接受使能和模式设置 
  52   1        ES2R = 1;           //中断接受使能
  53   1          ES2T = 1;           //中断发送使能
C51 COMPILER V9.60.7.0   UART                                                              10/15/2025 21:46:45 PAGE 2   

  54   1      
  55   1          baud = FOSC/8/baud;
  56   1      
  57   1          BODE2_DIV_H = (uint8_t)(baud>>8);
  58   1          BODE2_DIV_L = (uint8_t)baud;
  59   1      
  60   1          // TR4=0;
  61   1      }
  62          
  63          void Uart5_Init( uint32_t baud )
  64          {
  65   1        SCON3T= 0x80;       //发送使能和模式设置
  66   1        SCON3R= 0x80;       //接受使能和模式设置 
  67   1        ES3R = 1;           //中断接受使能
  68   1          ES3T = 1;           //中断发送使能
  69   1      
  70   1          baud = FOSC/8/baud;
  71   1      
  72   1        BODE3_DIV_H = (uint8_t)(baud>>8);
  73   1          BODE3_DIV_L = (uint8_t)baud;
  74   1      
  75   1          TR5 = 0;
  76   1      }
  77          
  78          /*    串口2下载程序   */
  79          void uart_frame_deal( void )
  80          {
  81   1        //串口2数据收发
  82   1        if(( R_OD2 == 1 ) && ( T_O2 == 0 ))
  83   1        {
  84   2          R_OD2=0;
  85   2          deal_uart_data(R_u2,(uint16_t*)(&R_CN2),2,RESPONSE_UART2,CRC_CHECK_UART2);
  86   2          R_CN2=0;
  87   2        } 
  88   1      }
  89          
  90          void deal_uart_data(uint8_t* Arr_rece,uint16_t* Data_len,uint8_t Uart_num,bit Response,bit Crc_ck)
  91          {
  92   1        uint16_t N = 0; 
  93   1        bit Flog = 1;
  94   1      
  95   1        while(Flog)
  96   1        {   
  97   2          if(( Arr_rece[N] == DTHD1 ) && ( Arr_rece[N+1] == DTHD2 ))   //5A A5 07 82 1000 0001 0002
  98   2          {      
  99   3            if( Arr_rece[N+3] == 0x82 )     
 100   3            {    
 101   4              Response_flog = Response;       //应答标记
 102   4              Crc_check_flog = Crc_ck;        //Crc标记
 103   4              deal_82_cmd(Uart_num,Arr_rece + N);   //处理82指令
 104   4              N = N + Arr_rece[N + 2] + 2;
 105   4            }                         // 0  1  2  3  4  5  6  7 8  9 10
 106   3            else if( Arr_rece[N + 3] == 0x83 )        //5A A5 08 83 1000 02 0001 0002
 107   3            {     
 108   4              uint8_t Val[FRAME_LEN] = {0}; 
 109   4              Crc_check_flog = Crc_ck;        //Crc标记
 110   4              deal_83_cmd(Uart_num, Val, Arr_rece + N);//处理83指令
 111   4              N = N + Arr_rece[N + 2] + 2;
 112   4            }else
 113   3            {
 114   4              N++;
 115   4            }   
C51 COMPILER V9.60.7.0   UART                                                              10/15/2025 21:46:45 PAGE 3   

 116   3          }
 117   2          if( N < (*Data_len - 4)) 
 118   2          {
 119   3            N++;
 120   3          }
 121   2          else 
 122   2          {
 123   3            Flog=0; 
 124   3          }           
 125   2        }
 126   1      }
 127          
 128          void  deal_82_cmd(uint8_t Uart, uint8_t* arr)
 129          {    
 130   1        uint8_t i = 0;
 131   1      
 132   1        if( Crc_check_flog == 0 ) //不含CRC检验
 133   1        {    
 134   2          if(arr[4] == 0x00 && arr[5] == 0x06)
 135   2          {
 136   3            Write_Dgus(0x0006,0x5aa5);
 137   3            Write_Dgus(0x0007,0X8000);
 138   3          }else
 139   2          {
 140   3            Write_Dgusii_Vp_byChar((arr[4] << 8) + arr[5],arr + 6,arr[2] - 3);  
 141   3          }
 142   2          
 143   2          if( Response_flog == 1 )   
 144   2          {
 145   3            uint8_t Temp_arr[]={DTHD1,DTHD2,0X03,0X82,0X4F,0X4B};   
 146   3                        
 147   3            for(i = 0; i < 6; i++)
 148   3            {
 149   4              uart_send_byte(Uart,Temp_arr[i]); //5A A5 03 82 4F 4B
 150   4            }                    
 151   3          }
 152   2        }
 153   1      }
 154          
 155          void  deal_83_cmd(uint8_t Uart, uint8_t* arr, uint8_t* arr1)
 156          {
 157   1          uint8_t i = 0;
 158   1      
 159   1          if( Crc_check_flog == 0 ) //不含CRC检验
 160   1          {   
 161   2              for( i = 0; i < 7; i++ )
 162   2              {
 163   3                  arr[i] = arr1[i];
 164   3              }
 165   2      
 166   2              sys_read_vp((arr[4] << 8) + arr[5], (uint8_t*) & arr[7], arr[6]);
 167   2              arr[2]=(2 * arr[6]) + 4;
 168   2      
 169   2              for(i = 0; i < (arr[2] + 3); i++)
 170   2              {
 171   3                  uart_send_byte(Uart, arr[i]);
 172   3              }                              
 173   2          }
 174   1      }
 175          
 176          void uart_send_byte(uint8_t Uart_number, uint8_t Dat)
 177          {
C51 COMPILER V9.60.7.0   UART                                                              10/15/2025 21:46:45 PAGE 4   

 178   1          download_flag = 1;
 179   1      
 180   1          if( Uart_number == 2 )
 181   1          {
 182   2              while (Busy2);               
 183   2              Busy2 = 1;
 184   2              SBUF0 = Dat;         
 185   2          }
 186   1      }
 187          
 188          /*    自动上传处理    */
 189          void  Sw_Data_Send()
 190          {
 191   1        uint16_t  Va=Read_Dgus(0x0f00);
 192   1        uint16_t  V1=Read_Dgus(0x0f01);
 193   1        uint16_t addr_vol;
 194   1        uint8_t  val_H;
 195   1        uint8_t  val_L;
 196   1      
 197   1        if( ((uint8_t)(Va >> 8)) == 0x5A )
 198   1        {    
 199   2          uint8_t i = 0;
 200   2          uint16_t Temp = 0;
 201   2          uint8_t Val[100] = {0};      //5A A5 06 83 ADDR Len XX XX 
 202   2      
 203   2          Val[0] = 0x5A;
 204   2          Val[1] = 0xA5;
 205   2          Val[2] = (((uint8_t)V1) << 1) + 4;
 206   2          Val[3] = 0x83;
 207   2          Val[4] = (uint8_t)Va; 
 208   2          Val[5] = (uint8_t)(V1 >> 8);
 209   2          Val[6] = (uint8_t)V1;
 210   2          for(i = 0; i < (uint8_t)V1; i++)
 211   2          {
 212   3            Temp=Read_Dgus(((Val[4] << 8) + Val[5] + i));
 213   3            Val[7 + 2 * i] = (uint8_t)(Temp >> 8);
 214   3            Val[8 + 2 * i] = (uint8_t)(Temp);
 215   3          }
 216   2          addr_vol = (Val[4] << 8) | ( Val[5] & 0xff);
 217   2          printf("addr is %04x\r\n",addr_vol);
 218   2          
 219   2          val_H = Val[7];
 220   2          val_L = Val[8];
 221   2          if( Val[6] == 2 )
 222   2          {
 223   3            if((Val[7]==0x00)&&(Val[8]==0x03)&&(Val[9]==0x64)&&(Val[10]==0x0e))
 224   3            {
 225   4              mima_val = 222222;
 226   4            }
 227   3          }
 228   2      
 229   2          gui_vol_ctrl(addr_vol, val_H, val_L);
 230   2      
 231   2          uart_data_send(Val, 2, 1, CRC_CHECK_UART2); 
 232   2          Write_Dgus(0x0f00, 0);Write_Dgus(0x0f01, 0);
 233   2        }
 234   1      }
 235          
 236          /****************************数据自动上传************************************************/
 237          void uart_data_send(uint8_t* Arr,uint8_t Uartnum,bit Outo_send,bit Crc_ck )
 238          {
 239   1        uint8_t i = 0;      
C51 COMPILER V9.60.7.0   UART                                                              10/15/2025 21:46:45 PAGE 5   

 240   1        Auto_data_upload = Outo_send;
 241   1        if( Auto_data_upload ) 
 242   1        {
 243   2          for(i = 0; i < Arr[2] + 3; i++)
 244   2          {
 245   3            uart_send_byte(Uartnum, Arr[i]);  
 246   3          }
 247   2        }              
 248   1      }
*** WARNING C280 IN LINE 237 OF ..\Core\Src\uart.c: 'Crc_ck': unreferenced local variable


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1614    ----
   CONSTANT SIZE    =    376    ----
   XDATA SIZE       =   2056     409
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
