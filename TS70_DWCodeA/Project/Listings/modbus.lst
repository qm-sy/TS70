C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN ..\Output\modbus.obj
COMPILER INVOKED BY: D:\APP\KEIL\MDK\C51\BIN\C51.EXE ..\Emembed\Src\modbus.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BS
                    -P\Inc;..\Core\Inc;..\Driver;..\SYSTEM;..\Emembed\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus.lst) TABS(2) OBJECT(..\
                    -Output\modbus.obj)

line level    source

   1          #include "modbus.h"
   2          
   3          MODBIS5_INFO modbus5;
   4          
   5          void Modbus_Event_Uart2( void )
   6          {
   7   1          uint16_t crc,rccrc = 0;
   8   1      
   9   1          /*1.接收完毕                                           */
  10   1          if( rs485_2.RX2_rev_end_Flag == 1 )
  11   1          {
  12   2              /*2.清空接收完毕标志位                              */    
  13   2              rs485_2.RX2_rev_end_Flag = 0;
  14   2      
  15   2              /*3.CRC校验                                         */
  16   2              crc = MODBUS_CRC16(rs485_2.RX2_buf, rs485_2.RX2_rev_cnt-2);
  17   2              rccrc = (rs485_2.RX2_buf[rs485_2.RX2_rev_cnt-1]) | (rs485_2.RX2_buf[rs485_2.RX2_rev_cnt-2]<<8);
  18   2      
  19   2              /*4.清空接收计数                                    */
  20   2              rs485_2.RX2_rev_cnt = 0; 
  21   2      
  22   2              /*5.CRC校验通过，进行地址域校验                      */
  23   2              if( crc == rccrc )
  24   2              {  
  25   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  26   3                  if( rs485_2.RX2_buf[0] == 0x01 )    
  27   3                  {
  28   4                      switch ( rs485_2.RX2_buf[1] )
  29   4                      {
  30   5                          case 0x06:
  31   5                              printf("uart2 is ok \r\n");
  32   5                              break;  
  33   5      
  34   5                          default:
  35   5                              break;
  36   5                      }
  37   4                  }
  38   3              }
  39   2          }
  40   1      }
  41          
  42          void Modbus_Event_Uart4( void )
  43          {
  44   1          uint16_t crc,rccrc = 0;
  45   1      
  46   1          /*1.接收完毕                                           */
  47   1          if( rs485_4.RX4_rev_end_Flag == 1 )
  48   1          {
  49   2              /*2.清空接收完毕标志位                              */    
  50   2              rs485_4.RX4_rev_end_Flag = 0;
  51   2      
  52   2              /*3.CRC校验                                         */
  53   2              crc = MODBUS_CRC16(rs485_4.RX4_buf, rs485_4.RX4_rev_cnt-2);
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 2   

  54   2              rccrc = (rs485_4.RX4_buf[rs485_4.RX4_rev_cnt-1]) | (rs485_4.RX4_buf[rs485_4.RX4_rev_cnt-2]<<8);
  55   2      
  56   2              /*4.清空接收计数                                    */
  57   2              rs485_4.RX4_rev_cnt = 0; 
  58   2      
  59   2              /*5.CRC校验通过，进行地址域校验                      */
  60   2              if( crc == rccrc )
  61   2              {
  62   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  63   3                  if( rs485_4.RX4_buf[0] == 0x01 )
  64   3                  {
  65   4                      switch ( rs485_4.RX4_buf[1] )
  66   4                      {
  67   5                          case 0x06:
  68   5      
  69   5                              break;  
  70   5      
  71   5                          default:
  72   5                              break;
  73   5                      }
  74   4                  }
  75   3              }
  76   2          }
  77   1      }
  78          
  79          void Modbus_Event_Uart5( void )
  80          {
  81   1          uint16_t crc,rccrc = 0;
  82   1      
  83   1          /*1.接收完毕                                           */
  84   1          if( rs485_5.RX_rcv_end_Flag == 1 )
  85   1          {
  86   2              /*2.CRC校验                                         */
  87   2              crc = MODBUS_CRC16(rs485_5.RX_buf, rs485_5.RX_rcv_cnt-2);
  88   2              rccrc = (rs485_5.RX_buf[rs485_5.RX_rcv_cnt - 2]) | (rs485_5.RX_buf[rs485_5.RX_rcv_cnt - 1] << 8);
  89   2      
  90   2              /*3.CRC校验通过，进行地址域校验                      */
  91   2              if( crc == rccrc )
  92   2              {
  93   3                  /*4.地址域校验通过，进入相应功能函数进行处理      */
  94   3                  if( rs485_5.RX_buf[0] == 0x01 )
  95   3                  {
  96   4                      switch ( rs485_5.RX_buf[1] )
  97   4                      {    
  98   5                          case FUN_03:        Modbus_Fun03();         break; 
  99   5      
 100   5                          case FUN_06:        Modbus_Fun06();         break; 
 101   5                              
 102   5                          case FUN_16:        Modbus_Fun16();         break;  
 103   5      
 104   5                          default:                                    break;
 105   5                      }
 106   4                  }
 107   3              }
 108   2              /*5.清空接收计数                                    */
 109   2              rs485_5.RX_rcv_cnt = 0; 
 110   2              /*6.清空接收完毕标志位                              */    
 111   2              rs485_5.RX_rcv_end_Flag = 0;
 112   2          }
 113   1      }
 114          
 115          void Modbus_Fun03( void )
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 3   

 116          {
 117   1          uint16_t i;
 118   1      
 119   1          modbus5.send_val_addr  = 3;                //DATA1 H 位置
 120   1          modbus5.byte_cnt   = (rs485_5.RX_buf[4]<<8 | rs485_5.RX_buf[5]) *2;
 121   1          modbus5.start_addr = rs485_5.RX_buf[2]<<8 | rs485_5.RX_buf[3];
 122   1      
 123   1          rs485_5.TX_buf[0]  = HANSEN_ADDR;                //Addr
 124   1          rs485_5.TX_buf[1]  = FUN_03;                   //Fun
 125   1          rs485_5.TX_buf[2]  = modbus5.byte_cnt;       //Byte Count
 126   1      
 127   1          for( i = modbus5.start_addr; i < modbus5.start_addr + modbus5.byte_cnt/2; i++ )
 128   1          {
 129   2              /*    每次循环前初始化byte_info                       */
 130   2              modbus5.byte_info_H = modbus5.byte_info_L = 0X00;
 131   2              switch (i)
 132   2              {   
 133   3                  /*  x白边              */
 134   3                  case 0x00:  
 135   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x00 >> 8);
 136   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x00 & 0xFF);
 137   3      
 138   3                      break;
 139   3                  /*  y白边              */
 140   3                  case 0x02:  
 141   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x02 >> 8);
 142   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x02 & 0xFF);
 143   3      
 144   3                      break;
 145   3      
 146   3                  /*  获取当前主板语言              */
 147   3                  case 0x06:  
 148   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x06 >> 8);
 149   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x06 & 0xFF); 
 150   3      
 151   3                      break;
 152   3      
 153   3                  /*  获取当前主板语言              */
 154   3                  case 0x10:  
 155   3                      modbus5.byte_info_H  = 0x00;
 156   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x10 & 0xFF); 
 157   3      
 158   3                      break;
 159   3      
 160   3                  /*  获取当前主板语言              */
 161   3                  case 0x0c:  
 162   3                      modbus5.byte_info_H  = 0x00;
 163   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x0c & 0xFF); 
 164   3      
 165   3                      break;
 166   3      
 167   3                  /*  马达操作                      */
 168   3                  case 0x20:
 169   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x20 >> 8);
 170   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x20 & 0xFF);
 171   3      
 172   3                      break;
 173   3      
 174   3                  /*  喷头操作                       */    
 175   3                  case 0x21:
 176   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x21 >> 8);
 177   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x21 & 0xFF);
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 4   

 178   3      
 179   3                      break;
 180   3      
 181   3                  /*  喷头强度                  */
 182   3                  case 0x22:    
 183   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x22 >> 8);
 184   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x22 & 0xFF); 
 185   3      
 186   3                      break;
 187   3      
 188   3                  /*  喷头数量                 */
 189   3                  case 0x23:   
 190   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x23 >> 8);
 191   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x23 & 0xFF); 
 192   3      
 193   3                      break;
 194   3      
 195   3                  /*  信号                 */
 196   3                  case 0x2d:    
 197   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x2d >> 8);
 198   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x2d & 0xFF); 
 199   3      
 200   3                      break;
 201   3      
 202   3                  /*  校准图类型                 */
 203   3                  case 0x30:   
 204   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x30 >> 8);
 205   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x30 & 0xFF); 
 206   3      
 207   3                      break; 
 208   3      
 209   3                  default:
 210   3                      break;
 211   3              }
 212   2              rs485_5.TX_buf[modbus5.send_val_addr++] = modbus5.byte_info_H;
 213   2              rs485_5.TX_buf[modbus5.send_val_addr++] = modbus5.byte_info_L;
 214   2          }
 215   1          slave_to_master(0x03,3 + modbus5.byte_cnt);
 216   1          if( hansen.connect_flag == 0 )
 217   1          {
 218   2              hansen.connect_flag = 1;
 219   2              Write_Dgus(0x2025,1);
 220   2          }
 221   1          
 222   1      }
 223          
 224          void Modbus_Fun06( void )
 225          {
 226   1          switch(rs485_5.RX_buf[3])
 227   1          {
 228   2              /*  马达操作                      */
 229   2              case 0x20:                         
 230   2                  hansen.addr_0x20 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 231   2      
 232   2                  break;  
 233   2      
 234   2              /*  喷头操作                       */    
 235   2              case 0x21:
 236   2                  hansen.addr_0x21 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 237   2      
 238   2                  break;
 239   2      
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 5   

 240   2              /*  喷头强度                  */
 241   2              case 0x22:    
 242   2                  hansen.addr_0x22 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 243   2      
 244   2                  break;
 245   2      
 246   2              /*  喷头数量                 */
 247   2              case 0x23:   
 248   2                  hansen.addr_0x23 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 249   2      
 250   2                  break;
 251   2      
 252   2              /*  信号                 */
 253   2              case 0x2d:    
 254   2                  hansen.addr_0x2d = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 255   2      
 256   2                  break;
 257   2      
 258   2              /*  校准图类型                 */
 259   2              case 0x30:   
 260   2                  hansen.addr_0x30 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 261   2      
 262   2                  break;
 263   2      
 264   2              // /*                    */
 265   2              // case 0x100:   
 266   2              //     //hansen.addr_0x2 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 267   2      
 268   2              //     break;
 269   2      
 270   2              // /*                    */
 271   2              // case 0x101:    
 272   2              //     //hansen.addr_0x24 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 273   2      
 274   2              //     break;
 275   2       
 276   2              // /*                    */
 277   2              // case 0x102:   
 278   2              //     //hansen.addr_0x25 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 279   2      
 280   2              //     break;
 281   2      
 282   2              default:
 283   2                  break;   
 284   2          }
 285   1      
 286   1          slave_to_master(FUN_06,8);
 287   1      
 288   1      }
 289          
 290          /**
 291           * @brief 写多个输出寄存器  16
 292           *
 293           * @param   void
 294           *
 295           * @return  void 
 296          **/
 297          void Modbus_Fun16( void )
 298          {
 299   1          uint16_t i;
 300   1          static uint8_t chip_id[32] = {0};
 301   1          static uint8_t FW_set[32] = {0};
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 6   

 302   1          static uint8_t FW_params[32] = {0};
 303   1          static uint8_t HS_version[30] = {0};
 304   1          static uint8_t renwu_name[32] = {0};
 305   1          static uint8_t dayin_mode[20] = {0};
 306   1      
 307   1          modbus5.rcv_value_addr = 7;                  //DATA1 H位置
 308   1          modbus5.byte_cnt   = rs485_5.RX_buf[6];
 309   1          modbus5.start_addr = rs485_5.RX_buf[2]<<8 | rs485_5.RX_buf[3];
 310   1      
 311   1          for( i = modbus5.start_addr; i < modbus5.start_addr + modbus5.byte_cnt/2; i++)
 312   1          {
 313   2              modbus5.byte_info_H = rs485_5.RX_buf[modbus5.rcv_value_addr];
 314   2              modbus5.byte_info_L = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 315   2              switch (i)
 316   2              {
 317   3                  /*  40001  24V LED开关状态设置                  */
 318   3                  case 0:
 319   3      
 320   3      
 321   3                      break;
 322   3                  
 323   3                  /*  40002  两路PWM 开关状态及风速设置           */
 324   3                  case 1:
 325   3      
 326   3      
 327   3                      break;
 328   3      
 329   3                  /*  40003  220V 开关设置                        */
 330   3                  case 2:
 331   3      
 332   3                      break;
 333   3      
 334   3                  /*  40004  烘干功率及风扇档位 设置              */
 335   3                  case 3:
 336   3      
 337   3      
 338   3                      break;
 339   3      
 340   3                  /*  40005  NTC1 NTC2 alarm value 设置           */
 341   3                  case 4:
 342   3      
 343   3      
 344   3                      break;
 345   3                  
 346   3                  /*  40006  NTC3 alarm value 设置                */
 347   3                  case 5:
 348   3      
 349   3      
 350   3                      break;
 351   3      
 352   3                  /*  40007  同步开关设置                         */
 353   3                  case 0x0100:
 354   3                      hansen.addr_0x0100 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 355   3      
 356   3                      switch(hansen.addr_0x0100)
 357   3                      {
 358   4                          
 359   4                          case 0:         hansen.addr_0x21 = 0;    hansen.addr_0x20 = 0;            break;      
             -//停止装墨    
 360   4                          case 2:         hansen.addr_0x20 = 0;         
 361   4                                          sys_write_vp(0x2020,(uint8_t*)&(hansen.addr_0x20),1);     break;      
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 7   

             -//复位 
 362   4                                    
 363   4                          case 3:         hansen.addr_0x30 = 0;                                     break;      
             -//打印       
 364   4                          case 6:         hansen.addr_0x21 = 0;    hansen.addr_0x22 = 0;    hansen.addr_0x23 = 0
             -;   
 365   4                                          sys_write_vp(0x2022,(uint8_t*)&(hansen.addr_0x22),1);     
 366   4                                          sys_write_vp(0x2023,(uint8_t*)&(hansen.addr_0x23),1);     break;      
             -//清洗 
 367   4                                          
 368   4                          case 10:        hansen.addr_0x21 = 0;    hansen.addr_0x23 = 0;
 369   4                                          sys_write_vp(0x2023,(uint8_t*)&(hansen.addr_0x23),1);     break;      
             -//开始装墨
 370   4                          case 12:        hansen.addr_0x20 = 0;                                     break;      
             -//开始装墨
 371   4                          default:                                                                  break;
 372   4                      }
 373   3      
 374   3                      break;
 375   3      
 376   3                  /*  40007  同步开关设置                         */
 377   3                  case 0x0102:
 378   3                      hansen.addr_0x0102 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 379   3      
 380   3                      switch(hansen.addr_0x0102)
 381   3                      { 
 382   4                          case 0:         Write_Dgusii_Vp_byChar(0x1600,"  空闲  ",8);      
 383   4                                          hansen.ctrl_flag = 1; 
 384   4                                          break;
 385   4                          case 1:         if( hansen.ctrl_flag == 0 )
 386   4                                          {
 387   5                                              Write_Dgusii_Vp_byChar(0x1600," 初始化 ",8);
 388   5                                          }
 389   4                                          break;     
 390   4                          case 2:         Write_Dgusii_Vp_byChar(0x1600,"  打印  ",8);       jump_page(11);  bre
             -ak;
 391   4                          case 3:         Write_Dgusii_Vp_byChar(0x1600,"  恢复  ",8);        break;      //停止
             -装墨    
 392   4                          case 4:         Write_Dgusii_Vp_byChar(0x1600,"  暂停  ",8);        break;
 393   4                          case 5:         Write_Dgusii_Vp_byChar(0x1600,"印中清洗",8);     break;
 394   4                          case 6:         Write_Dgusii_Vp_byChar(0x1600,"  保湿  ",8);        break;      //停止
             -装墨    
 395   4                          case 7:         Write_Dgusii_Vp_byChar(0x1600,"其他动作",8);     break;
 396   4                          default:                                            break;
 397   4                      }
 398   3      
 399   3                      break;
 400   3      
 401   3                  case 0x0110:
 402   3                      hansen.addr_0x0110 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 403   3                      Write_Dgus(0x20ce,hansen.addr_0x0110);   
 404   3                      break;
 405   3      
 406   3                  case 0x0111:
 407   3                      hansen.addr_0x0111 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 408   3                      Write_Dgus(0x20cd,hansen.addr_0x0111); 
 409   3                      break;
 410   3      
 411   3                  case 0x0112:
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 8   

 412   3                      hansen.addr_0x0112 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 413   3                      Write_Dgus(0x20c0,hansen.addr_0x0112); 
 414   3                      break;   
 415   3      
 416   3                  case 0x0114:
 417   3                      hansen.addr_0x0114 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 418   3                      Write_Dgus(0x20c2,hansen.addr_0x0114); 
 419   3                      break; 
 420   3      
 421   3                  case 0x011a:
 422   3                      hansen.addr_0x011a = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 423   3                      Write_Dgus(0x20c4,hansen.addr_0x011a); 
 424   3                      break;
 425   3      
 426   3                  case 0x011c:
 427   3                      hansen.addr_0x011c = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 428   3                      Write_Dgus(0x20c6,hansen.addr_0x011c); 
 429   3                      break;
 430   3      
 431   3                  case 0x0120:
 432   3                      dayin_mode[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 433   3                      dayin_mode[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 434   3                      break;
 435   3                  case 0x0121:
 436   3                      dayin_mode[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 437   3                      dayin_mode[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 438   3                      break;
 439   3                  case 0x0122:
 440   3                      dayin_mode[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 441   3                      dayin_mode[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 442   3                      break;
 443   3                  case 0x0123:
 444   3                      dayin_mode[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 445   3                      dayin_mode[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 446   3                      break;
 447   3                  case 0x0124:
 448   3                      dayin_mode[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 449   3                      dayin_mode[9] = rs485_5.RX_buf[modbus5.rcv_value_addr]; 
 450   3                      Write_Dgusii_Vp_byChar(0x20b0,dayin_mode,10);           
 451   3                      break;
 452   3      
 453   3                  case 0x0134:
 454   3                      hansen.addr_0x0134 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 455   3                      time_trans(hansen.addr_0x0134,0);
 456   3      
 457   3                      Write_Dgus(0x20d0,dayin_t.cnt_h); 
 458   3                      Write_Dgus(0x20d1,dayin_t.cnt_min); 
 459   3                      Write_Dgus(0x20d2,dayin_t.cnt_s); 
 460   3                      break;
 461   3      
 462   3                  case 0x0136:
 463   3                      hansen.addr_0x0136 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 464   3                      time_trans(hansen.addr_0x0136,1);
 465   3      
 466   3                      Write_Dgus(0x20d3,dayin_t.remain_h); 
 467   3                      Write_Dgus(0x20d4,dayin_t.remain_min); 
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 9   

 468   3                      Write_Dgus(0x20d5,dayin_t.remain_s); 
 469   3                      break;
 470   3      
 471   3                  case 0x0138:
 472   3                      hansen.addr_0x0138 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 473   3      
 474   3                      Write_Dgus(0x20cc,hansen.addr_0x0138); 
 475   3                      break;
 476   3      
 477   3                  case 0x013a:
 478   3                      hansen.addr_0x013a = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 479   3      
 480   3                      Write_Dgus(0x20c9,hansen.addr_0x013a); 
 481   3                      break;
 482   3      
 483   3                  case 0x013c:
 484   3                      hansen.addr_0x013c = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 485   3                      if( hansen.addr_0x013c == 100 )
 486   3                      {
 487   4                          jump_page(0); 
 488   4                      }
 489   3                      Write_Dgus(0x20d9,hansen.addr_0x013c); 
 490   3                      break;
 491   3      
 492   3                  case 0x0140:
 493   3                      renwu_name[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 494   3                      renwu_name[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 495   3                      break;
 496   3                  case 0x0141:
 497   3                      renwu_name[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 498   3                      renwu_name[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 499   3                      break;
 500   3                  case 0x0142:
 501   3                      renwu_name[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 502   3                      renwu_name[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 503   3                      break;
 504   3                  case 0x0143:
 505   3                      renwu_name[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 506   3                      renwu_name[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 507   3                      break;
 508   3                  case 0x0144:
 509   3                      renwu_name[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 510   3                      renwu_name[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 511   3                      break;
 512   3                  case 0x0145:
 513   3                      renwu_name[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 514   3                      renwu_name[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 515   3                      break;
 516   3      
 517   3                  case 0x0146:
 518   3                      renwu_name[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 519   3                      renwu_name[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 520   3                      break;
 521   3                  case 0x0147:
 522   3                      renwu_name[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 523   3                      renwu_name[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 524   3                      break;
 525   3                  case 0x0148:
 526   3                      renwu_name[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 10  

 527   3                      renwu_name[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 528   3                      break;
 529   3                  case 0x0149:
 530   3                      renwu_name[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 531   3                      renwu_name[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];     
 532   3                      //Write_Dgusii_Vp_byChar(0x20f0,renwu_name,20);   
 533   3                        
 534   3                      break;
 535   3      
 536   3                  case 0x0156:
 537   3                      hansen.addr_0x0156_H = rs485_5.RX_buf[modbus5.rcv_value_addr];
 538   3                      hansen.addr_0x0156_L = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 539   3                      Write_Dgus(0x2080,hansen.addr_0x0156_L);     
 540   3                      Write_Dgus(0x2082,hansen.addr_0x0156_H);    
 541   3                      break;
 542   3                      
 543   3                  case 0x0157:
 544   3                      hansen.addr_0x0157_H = rs485_5.RX_buf[modbus5.rcv_value_addr];
 545   3                      hansen.addr_0x0157_L = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 546   3                      Write_Dgus(0x2084,hansen.addr_0x0157_L);     
 547   3                      Write_Dgus(0x2086,hansen.addr_0x0157_H);    
 548   3                      break;
 549   3      
 550   3                  case 0x0158:
 551   3                      hansen.addr_0x00 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 552   3                      Write_Dgus(0x2060,hansen.addr_0x00);     
 553   3                      break;
 554   3      
 555   3                  case 0x015a:
 556   3                      hansen.addr_0x02 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 557   3                      Write_Dgus(0x2062,hansen.addr_0x02);  
 558   3                      break;
 559   3      
 560   3                  case 0x015e:
 561   3                      hansen.addr_0x06 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 562   3                      
 563   3                      hansen.addr_0x06_02 = hansen.addr_0x06 & 0x04;
 564   3                      if( hansen.addr_0x06_02 == 4 )
 565   3                      {
 566   4                          hansen.addr_0x06_02 = 3;
 567   4                      }
 568   3                      hansen.addr_0x06_35 = (hansen.addr_0x06 & 0x38) >> 3;
 569   3                      if( hansen.addr_0x06_35 == 4 )
 570   3                      {
 571   4                          hansen.addr_0x06_35 = 3;
 572   4                      }
 573   3                      hansen.addr_0x06_67 = (hansen.addr_0x06 & 0xc0) >> 6;
 574   3                      hansen.addr_0x06_8a = (hansen.addr_0x06 & 0x0700) >> 8;
 575   3                      if( hansen.addr_0x06_8a == 4 )
 576   3                      {
 577   4                          hansen.addr_0x06_8a = 3;
 578   4                      }
 579   3                      hansen.addr_0x06_bc = (hansen.addr_0x06 & 0x1800) >> 11;
 580   3      
 581   3                      Write_Dgus(0x2051,hansen.addr_0x06_02);  
 582   3                      Write_Dgus(0x2052,hansen.addr_0x06_35);
 583   3                      Write_Dgus(0x2053,hansen.addr_0x06_67);
 584   3                      Write_Dgus(0x2054,hansen.addr_0x06_8a);    
 585   3                      Write_Dgus(0x2055,hansen.addr_0x06_bc);   
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 11  

 586   3                      break;
 587   3      
 588   3                  case 0x015f:
 589   3                      hansen.addr_yuhua = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5
             -.rcv_value_addr + 1];
 590   3      
 591   3                      break;
 592   3      
 593   3                  case 0x0160:
 594   3                      hansen.addr_sjpt = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 595   3      
 596   3                      break;
 597   3      
 598   3                  case 0x0161:
 599   3                      hansen.addr_0x22 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 600   3                      Write_Dgus(0x2022,hansen.addr_0x22);
 601   3                      hansen.addr_0x22 = 0;    
 602   3                      break;
 603   3      
 604   3                  case 0x0162:
 605   3                      hansen.addr_0x23 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 606   3                      Write_Dgus(0x2023,hansen.addr_0x23);
 607   3                      hansen.addr_0x23 = 0;  
 608   3                      break;
 609   3      
 610   3                  case 0x0150:
 611   3                      hansen.addr_0x0150 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 612   3                      break;
 613   3      
 614   3                  case 0x0151:
 615   3                      hansen.addr_0x0151 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 616   3                      Write_Dgus(0x2070,hansen.addr_0x0151);
 617   3                      Write_Dgus(0x2071,hansen.addr_0x0150);
 618   3                      break;
 619   3      
 620   3                  case 0x0152:
 621   3                      hansen.addr_0x0152 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 622   3                      break;
 623   3      
 624   3                  case 0x0153:
 625   3                      hansen.addr_0x0153 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 626   3                      // Write_Dgus(0x2072,hansen.addr_0x0153);
 627   3                      // Write_Dgus(0x2073,hansen.addr_0x0152);
 628   3                      break;
 629   3      
 630   3                  case 0x0154:
 631   3                      hansen.addr_0x0154 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 632   3                      break;
 633   3      
 634   3                  case 0x0155:
 635   3                      hansen.addr_0x0155 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 636   3                      // Write_Dgus(0x2074,hansen.addr_0x0155);
 637   3                      // Write_Dgus(0x2075,hansen.addr_0x0154);
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 12  

 638   3                      break;
 639   3                  /*  40007  同步开关设置                         */
 640   3                  case 0x0169:
 641   3                      hansen.addr_0x0169 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 642   3      
 643   3                      switch(hansen.addr_0x0169)
 644   3                      {
 645   4                          
 646   4                          case 0  :         hansen.addr_0x10 |= 0x20;           break;         
 647   4                          
 648   4                          default:                                            break;
 649   4                      }
 650   3      
 651   3                      break;
 652   3      
 653   3                  case 0x0170:
 654   3                      HS_version[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 655   3                      HS_version[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 656   3                      break;
 657   3                  case 0x0171:
 658   3                      HS_version[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 659   3                      HS_version[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 660   3                      break;
 661   3                  case 0x0172:
 662   3                      HS_version[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 663   3                      HS_version[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 664   3                      break;
 665   3                  case 0x0173:
 666   3                      HS_version[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 667   3                      HS_version[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 668   3                      break;
 669   3                  case 0x0174:
 670   3                      HS_version[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 671   3                      HS_version[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 672   3                      break;
 673   3                  case 0x0175:
 674   3                      HS_version[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 675   3                      HS_version[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 676   3                      break;
 677   3      
 678   3                  case 0x0176:
 679   3                      HS_version[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 680   3                      HS_version[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 681   3                      break;
 682   3                  case 0x0177:
 683   3                      HS_version[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 684   3                      HS_version[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 685   3                      break;
 686   3                  case 0x0178:
 687   3                      HS_version[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 688   3                      HS_version[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 689   3                      break;
 690   3                  case 0x0179:
 691   3                      HS_version[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 692   3                      HS_version[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 693   3                      break;
 694   3                  case 0x017a:
 695   3                      HS_version[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 696   3                      HS_version[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 697   3                      break;
 698   3                  case 0x017b:
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 13  

 699   3                      HS_version[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 700   3                      HS_version[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 701   3                      break;
 702   3                  case 0x017c:
 703   3                      HS_version[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 704   3                      HS_version[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 705   3                      break;
 706   3                  case 0x017d:
 707   3                      HS_version[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 708   3                      HS_version[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 709   3                      break;
 710   3      
 711   3                  case 0x017e:
 712   3                      HS_version[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 713   3                      HS_version[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];   
 714   3                      Write_Dgusii_Vp_byChar(0x1630,HS_version,30);       
 715   3                      break;
 716   3      
 717   3                  case 0x0190:
 718   3                      chip_id[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 719   3                      chip_id[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 720   3                      break;
 721   3                  case 0x0191:
 722   3                      chip_id[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 723   3                      chip_id[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 724   3                      break;
 725   3                  case 0x0192:
 726   3                      chip_id[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 727   3                      chip_id[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 728   3                      break;
 729   3                  case 0x0193:
 730   3                      chip_id[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 731   3                      chip_id[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 732   3                      break;
 733   3                  case 0x0194:
 734   3                      chip_id[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 735   3                      chip_id[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 736   3                      break;
 737   3                  case 0x0195:
 738   3                      chip_id[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 739   3                      chip_id[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 740   3                      break;
 741   3      
 742   3                  case 0x0196:
 743   3                      chip_id[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 744   3                      chip_id[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 745   3                      break;
 746   3                  case 0x0197:
 747   3                      chip_id[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 748   3                      chip_id[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 749   3                      break;
 750   3                  case 0x0198:
 751   3                      chip_id[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 752   3                      chip_id[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 753   3                      break;
 754   3                  case 0x0199:
 755   3                      chip_id[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 756   3                      chip_id[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 757   3                      break;
 758   3                  case 0x019a:
 759   3                      chip_id[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 760   3                      chip_id[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 14  

 761   3                      break;
 762   3                  case 0x019b:
 763   3                      chip_id[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 764   3                      chip_id[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 765   3                      break;
 766   3                  case 0x019c:
 767   3                      chip_id[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 768   3                      chip_id[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 769   3                      break;
 770   3                  case 0x019d:
 771   3                      chip_id[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 772   3                      chip_id[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 773   3                      break;
 774   3      
 775   3                  case 0x019e:
 776   3                      chip_id[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 777   3                      chip_id[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 778   3                      break;
 779   3                  case 0x019f:
 780   3                      chip_id[30] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 781   3                      chip_id[31] = rs485_5.RX_buf[modbus5.rcv_value_addr];
 782   3                      Write_Dgusii_Vp_byChar(0x1650,chip_id,32);   
 783   3                      break;
 784   3      
 785   3                  case 0x01c0:
 786   3                      FW_set[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 787   3                      FW_set[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 788   3                      break;
 789   3                  case 0x01C1:
 790   3                      FW_set[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 791   3                      FW_set[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 792   3                      break;
 793   3                  case 0x01C2:
 794   3                      FW_set[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 795   3                      FW_set[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 796   3                      break;
 797   3                  case 0x01C3:
 798   3                      FW_set[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 799   3                      FW_set[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 800   3                      break;
 801   3                  case 0x01C4:
 802   3                      FW_set[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 803   3                      FW_set[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 804   3                      break;
 805   3                  case 0x01C5:
 806   3                      FW_set[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 807   3                      FW_set[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 808   3                      break;
 809   3      
 810   3                  case 0x01C6:
 811   3                      FW_set[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 812   3                      FW_set[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 813   3                      break;
 814   3                  case 0x01C7:
 815   3                      FW_set[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 816   3                      FW_set[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 817   3                      break;
 818   3                  case 0x01C8:
 819   3                      FW_set[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 820   3                      FW_set[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 821   3                      break;
 822   3                  case 0x01C9:
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 15  

 823   3                      FW_set[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 824   3                      FW_set[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 825   3                      break;
 826   3                  case 0x01Ca:
 827   3                      FW_set[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 828   3                      FW_set[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 829   3                      break;
 830   3                  case 0x01Cb:
 831   3                      FW_set[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 832   3                      FW_set[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 833   3                      break;
 834   3                  case 0x01Cc:
 835   3                      FW_set[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 836   3                      FW_set[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 837   3                      break;
 838   3                  case 0x01Cd:
 839   3                      FW_set[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 840   3                      FW_set[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 841   3                      break;
 842   3      
 843   3                  case 0x01Ce:
 844   3                      FW_set[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 845   3                      FW_set[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 846   3                      break;
 847   3                  case 0x01Cf:
 848   3                      FW_set[30] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 849   3                      FW_set[31] = rs485_5.RX_buf[modbus5.rcv_value_addr];
 850   3                      Write_Dgusii_Vp_byChar(0x1670,FW_set,32);   
 851   3                      break;
 852   3      
 853   3                  case 0x01D0:
 854   3                      FW_params[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 855   3                      FW_params[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 856   3                      break;
 857   3                  case 0x01D1:
 858   3                      FW_params[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 859   3                      FW_params[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 860   3                      break;
 861   3                  case 0x01D2:
 862   3                      FW_params[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 863   3                      FW_params[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 864   3                      break;
 865   3                  case 0x01D3:
 866   3                      FW_params[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 867   3                      FW_params[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 868   3                      break;
 869   3                  case 0x01D4:
 870   3                      FW_params[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 871   3                      FW_params[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 872   3                      break;
 873   3                  case 0x01D5:
 874   3                      FW_params[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 875   3                      FW_params[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 876   3                      break;
 877   3      
 878   3                  case 0x01D6:
 879   3                      FW_params[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 880   3                      FW_params[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 881   3                      break;
 882   3                  case 0x01D7:
 883   3                      FW_params[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 884   3                      FW_params[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 16  

 885   3                      break;
 886   3                  case 0x01D8:
 887   3                      FW_params[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 888   3                      FW_params[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 889   3                      break;
 890   3                  case 0x01D9:
 891   3                      FW_params[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 892   3                      FW_params[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 893   3                      break;
 894   3                  case 0x01Da:
 895   3                      FW_params[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 896   3                      FW_params[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 897   3                      break;
 898   3                  case 0x01Db:
 899   3                      FW_params[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 900   3                      FW_params[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 901   3                      break;
 902   3                  case 0x01Dc:
 903   3                      FW_params[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 904   3                      FW_params[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 905   3                      break;
 906   3                  case 0x01Dd:
 907   3                      FW_params[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 908   3                      FW_params[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 909   3                      break;
 910   3      
 911   3                  case 0x01De:
 912   3                      FW_params[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 913   3                      FW_params[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 914   3                      break;
 915   3                  case 0x01Df:
 916   3                      FW_params[30] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 917   3                      FW_params[31] = rs485_5.RX_buf[modbus5.rcv_value_addr];
 918   3                      Write_Dgusii_Vp_byChar(0x1690,FW_params,32);   
 919   3                      break;    
 920   3                  default:
 921   3                      break;
 922   3              }
 923   2              modbus5.rcv_value_addr += 2;         //从Value1_H →→ 从Value2_H
 924   2          }
 925   1          
 926   1          slave_to_master(FUN_16,8);  
 927   1      
 928   1      }
 929          
 930          /**
 931           * @brief 写单个输出寄存器-06
 932           *
 933           * @param   reg_addr：要写的寄存器地址
 934           *          reg_val： 要写的值
 935           *
 936           * @return  void
 937           */
 938          void write_slave_06( uint8_t uart_num, uint16_t reg_addr, uint8_t reg_val_H, uint8_t reg_val_L)
 939          {
 940   1          uint8_t send_buf[8];
 941   1          uint16_t crc;
 942   1      
 943   1          delay_ms(10);
 944   1          download_flag = 0;
 945   1      
 946   1          send_buf[0] = SLAVE_ADDR;       //Addr
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 17  

 947   1          send_buf[1] = FUN_06;           //Fun
 948   1      
 949   1          /*   Value_H  && Value_L    */
 950   1          send_buf[2] = reg_addr >> 8;
 951   1          send_buf[3] = reg_addr;
 952   1          send_buf[4] = reg_val_H ;
 953   1          send_buf[5] = reg_val_L;
 954   1      
 955   1          /*   crc    */
 956   1          crc = MODBUS_CRC16(send_buf,6);
 957   1          send_buf[6] = crc >> 8;
 958   1          send_buf[7] = crc;
 959   1      
 960   1          memcpy(rs485_5.TX_buf,send_buf,8);
 961   1          /*   发送，后使能接收    */
 962   1          rs485_5.TX_send_bytelength = 8;
 963   1      
 964   1          TR5 = 1;
 965   1      
 966   1          delay_ms(2);
 967   1          SCON3T |= S5TI;                             //开始发送
 968   1          delay_ms(1);
 969   1      }
*** WARNING C280 IN LINE 938 OF ..\Emembed\Src\modbus.c: 'uart_num': unreferenced local variable
 970          
 971          
 972          /**
 973           * @brief 从机回复主机
 974           *  
 975           * @param   code_num:功能码       
 976           * @param   length:数据长度        
 977           * 
 978            @return  crc16:crc校验的值 2byte
 979           */
 980          void slave_to_master(uint8_t code_num, uint8_t length)
 981          {
 982   1          uint16_t crc;
 983   1      
 984   1          switch(code_num)
 985   1          {
 986   2              case 0x03:
 987   2                  crc = MODBUS_CRC16(rs485_5.TX_buf,length);
 988   2      
 989   2                  // rs485_5.TX_buf[length+1] = crc;             //CRC H
 990   2                  // rs485_5.TX_buf[length] = crc>>8;            //CRC L
 991   2      
 992   2                  rs485_5.TX_buf[length] = crc;             //CRC H
 993   2                  rs485_5.TX_buf[length+1] = crc>>8;            //CRC L
 994   2                  
 995   2                  rs485_5.TX_send_bytelength = length + 2;
 996   2                  
 997   2                  break;
 998   2      
 999   2              case 0x04:
1000   2                  crc = MODBUS_CRC16(rs485_5.TX_buf,length);
1001   2      
1002   2                  rs485_5.TX_buf[length+1] = crc;              //CRC H
1003   2                  rs485_5.TX_buf[length] = crc>>8;             //CRC L
1004   2      
1005   2                  rs485_5.TX_send_bytelength = length + 2;
1006   2                  
1007   2                  break;    
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 18  

1008   2      
1009   2              case 0x06:
1010   2                  memcpy(rs485_5.TX_buf,rs485_5.RX_buf,length);
1011   2                  rs485_5.TX_send_bytelength = length;
1012   2      
1013   2                  break;    
1014   2      
1015   2              case 0x10:
1016   2                  memcpy(rs485_5.TX_buf,rs485_5.RX_buf,6);
1017   2              
1018   2                  crc = MODBUS_CRC16(rs485_5.TX_buf,6);
1019   2      
1020   2                  rs485_5.TX_buf[6] = crc;                 //CRC H
1021   2                  rs485_5.TX_buf[7] = crc>>8;              //CRC L
1022   2              
1023   2                  rs485_5.TX_send_bytelength = length;
1024   2                  
1025   2                  break; 
1026   2      
1027   2              default:
1028   2                  break;
1029   2          }
1030   1      
1031   1          TR5 = 1;                                //485可以发送
1032   1          delay_ms(2);
1033   1          SCON3T |= S5TI;                             //开始发送
1034   1          delay_ms(1);
1035   1      }
1036          
1037          /**
1038           * @brief crc校验函数
1039           * 
1040           * @param   buf：  Address(1 byte) +Funtion(1 byte) ）+Data(n byte)   
1041           * @param   length:数据长度           
1042           * 
1043            @return  crc16:crc校验的值 2byte
1044           */
1045          uint16_t MODBUS_CRC16(uint8_t *buf, uint16_t length)
1046          {
1047   1        uint8_t i;
1048   1        uint16_t  crc16;
1049   1      
1050   1          /* 1, 预置16位CRC寄存器为0xffff（即全为1）                          */
1051   1        crc16 = 0xffff; 
1052   1      
1053   1        do
1054   1        {
1055   2              /* 2, 把8位数据与16位CRC寄存器的低位相异或，把结果放于CRC寄存器     */        
1056   2          crc16 ^= (uint16_t)*buf;    //
1057   2          for(i=0; i<8; i++)    
1058   2          {
1059   3                  /* 3, 如果最低位为1，把CRC寄存器的内容右移一位(朝低位)，用0填补最高位 再异或0xA001    */
1060   3            if(crc16 & 1)
1061   3                  {
1062   4                      crc16 = (crc16 >> 1) ^ 0xA001;
1063   4                  }
1064   3                  /* 4, 如果最低位为0，把CRC寄存器的内容右移一位(朝低位)，用0填补最高位                */
1065   3                  else
1066   3                  {
1067   4                      crc16 >>= 1;
1068   4                  }   
1069   3          }
C51 COMPILER V9.60.7.0   MODBUS                                                            10/15/2025 21:46:46 PAGE 19  

1070   2          buf++;
1071   2        }while(--length != 0);
1072   1      
1073   1        return  (crc16);
1074   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7188    ----
   CONSTANT SIZE    =     87    ----
   XDATA SIZE       =    187      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
