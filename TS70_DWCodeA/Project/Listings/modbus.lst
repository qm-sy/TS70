C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MODBUS
OBJECT MODULE PLACED IN ..\Output\modbus.obj
COMPILER INVOKED BY: D:\APP\KEIL\MDK\C51\BIN\C51.EXE ..\Emembed\Src\modbus.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\BS
                    -P\Inc;..\Core\Inc;..\Driver;..\SYSTEM;..\Emembed\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\modbus.lst) TABS(2) OBJECT(..\
                    -Output\modbus.obj)

line level    source

   1          #include "modbus.h"
   2          
   3          MODBIS5_INFO modbus5;
   4          
   5          void Modbus_Event_Uart2( void )
   6          {
   7   1          uint16_t crc,rccrc = 0;
   8   1      
   9   1          /*1.接收完毕                                           */
  10   1          if( rs485_2.RX2_rev_end_Flag == 1 )
  11   1          {
  12   2              /*2.清空接收完毕标志位                              */    
  13   2              rs485_2.RX2_rev_end_Flag = 0;
  14   2      
  15   2              /*3.CRC校验                                         */
  16   2              crc = MODBUS_CRC16(rs485_2.RX2_buf, rs485_2.RX2_rev_cnt-2);
  17   2              rccrc = (rs485_2.RX2_buf[rs485_2.RX2_rev_cnt-1]) | (rs485_2.RX2_buf[rs485_2.RX2_rev_cnt-2]<<8);
  18   2      
  19   2              /*4.清空接收计数                                    */
  20   2              rs485_2.RX2_rev_cnt = 0; 
  21   2      
  22   2              /*5.CRC校验通过，进行地址域校验                      */
  23   2              if( crc == rccrc )
  24   2              {  
  25   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  26   3                  if( rs485_2.RX2_buf[0] == 0x01 )    
  27   3                  {
  28   4                      switch ( rs485_2.RX2_buf[1] )
  29   4                      {
  30   5                          case 0x06:
  31   5                              printf("uart2 is ok \r\n");
  32   5                              break;  
  33   5      
  34   5                          default:
  35   5                              break;
  36   5                      }
  37   4                  }
  38   3              }
  39   2          }
  40   1      }
  41          
  42          void Modbus_Event_Uart4( void )
  43          {
  44   1          uint16_t crc,rccrc = 0;
  45   1      
  46   1          /*1.接收完毕                                           */
  47   1          if( rs485_4.RX4_rev_end_Flag == 1 )
  48   1          {
  49   2              /*2.清空接收完毕标志位                              */    
  50   2              rs485_4.RX4_rev_end_Flag = 0;
  51   2      
  52   2              /*3.CRC校验                                         */
  53   2              crc = MODBUS_CRC16(rs485_4.RX4_buf, rs485_4.RX4_rev_cnt-2);
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 2   

  54   2              rccrc = (rs485_4.RX4_buf[rs485_4.RX4_rev_cnt-1]) | (rs485_4.RX4_buf[rs485_4.RX4_rev_cnt-2]<<8);
  55   2      
  56   2              /*4.清空接收计数                                    */
  57   2              rs485_4.RX4_rev_cnt = 0; 
  58   2      
  59   2              /*5.CRC校验通过，进行地址域校验                      */
  60   2              if( crc == rccrc )
  61   2              {
  62   3                  /*6.地址域校验通过，进入相应功能函数进行处理      */
  63   3                  if( rs485_4.RX4_buf[0] == 0x01 )
  64   3                  {
  65   4                      switch ( rs485_4.RX4_buf[1] )
  66   4                      {
  67   5                          case 0x06:
  68   5      
  69   5                              break;  
  70   5      
  71   5                          default:
  72   5                              break;
  73   5                      }
  74   4                  }
  75   3              }
  76   2          }
  77   1      }
  78          
  79          void Modbus_Event_Uart5( void )
  80          {
  81   1          uint16_t crc,rccrc = 0;
  82   1      
  83   1          /*1.接收完毕                                           */
  84   1          if( rs485_5.RX_rcv_end_Flag == 1 )
  85   1          {
  86   2              /*2.CRC校验                                         */
  87   2              crc = MODBUS_CRC16(rs485_5.RX_buf, rs485_5.RX_rcv_cnt-2);
  88   2              rccrc = (rs485_5.RX_buf[rs485_5.RX_rcv_cnt - 2]) | (rs485_5.RX_buf[rs485_5.RX_rcv_cnt - 1] << 8);
  89   2      
  90   2              /*3.CRC校验通过，进行地址域校验                      */
  91   2              if( crc == rccrc )
  92   2              {
  93   3                  /*4.地址域校验通过，进入相应功能函数进行处理      */
  94   3                  if( rs485_5.RX_buf[0] == 0x01 )
  95   3                  {
  96   4                      switch ( rs485_5.RX_buf[1] )
  97   4                      {    
  98   5                          case FUN_03:        Modbus_Fun03();         break; 
  99   5      
 100   5                          case FUN_06:        Modbus_Fun06();         break; 
 101   5                              
 102   5                          case FUN_16:        Modbus_Fun16();         break;  
 103   5      
 104   5                          default:                                    break;
 105   5                      }
 106   4                  }
 107   3              }
 108   2              /*5.清空接收计数                                    */
 109   2              rs485_5.RX_rcv_cnt = 0; 
 110   2              /*6.清空接收完毕标志位                              */    
 111   2              rs485_5.RX_rcv_end_Flag = 0;
 112   2          }
 113   1      }
 114          
 115          void Modbus_Fun03( void )
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 3   

 116          {
 117   1          uint16_t i;
 118   1      
 119   1          modbus5.send_val_addr  = 3;                //DATA1 H 位置
 120   1          modbus5.byte_cnt   = (rs485_5.RX_buf[4]<<8 | rs485_5.RX_buf[5]) *2;
 121   1          modbus5.start_addr = rs485_5.RX_buf[2]<<8 | rs485_5.RX_buf[3];
 122   1      
 123   1          rs485_5.TX_buf[0]  = HANSEN_ADDR;                //Addr
 124   1          rs485_5.TX_buf[1]  = FUN_03;                   //Fun
 125   1          rs485_5.TX_buf[2]  = modbus5.byte_cnt;       //Byte Count
 126   1      
 127   1          for( i = modbus5.start_addr; i < modbus5.start_addr + modbus5.byte_cnt/2; i++ )
 128   1          {
 129   2              /*    每次循环前初始化byte_info                       */
 130   2              modbus5.byte_info_H = modbus5.byte_info_L = 0X00;
 131   2              switch (i)
 132   2              {   
 133   3                  /*  x白边              */
 134   3                  case 0x00:  
 135   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x00 >> 8);
 136   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x00 & 0xFF);
 137   3      
 138   3                      break;
 139   3                  /*  y白边              */
 140   3                  case 0x02:  
 141   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x02 >> 8);
 142   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x02 & 0xFF);
 143   3      
 144   3                      break;
 145   3      
 146   3                  /*  获取当前主板语言              */
 147   3                  case 0x06:  
 148   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x06 >> 8);
 149   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x06 & 0xFF); 
 150   3      
 151   3                      break;
 152   3      
 153   3                  /*  获取当前主板语言              */
 154   3                  case 0x10:  
 155   3                      modbus5.byte_info_H  = 0x00;
 156   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x10 & 0xFF); 
 157   3      
 158   3                      break;
 159   3      
 160   3                  /*  获取当前主板语言              */
 161   3                  case 0x0c:  
 162   3                      modbus5.byte_info_H  = 0x00;
 163   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x0c & 0xFF); 
 164   3      
 165   3                      break;
 166   3      
 167   3                  /*  马达操作                      */
 168   3                  case 0x20:
 169   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x20 >> 8);
 170   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x20 & 0xFF);
 171   3      
 172   3                      break;
 173   3      
 174   3                  /*  喷头操作                       */    
 175   3                  case 0x21:
 176   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x21 >> 8);
 177   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x21 & 0xFF);
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 4   

 178   3      
 179   3                      break;
 180   3      
 181   3                  /*  喷头强度                  */
 182   3                  case 0x22:    
 183   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x22 >> 8);
 184   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x22 & 0xFF); 
 185   3      
 186   3                      break;
 187   3      
 188   3                  /*  喷头数量                 */
 189   3                  case 0x23:   
 190   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x23 >> 8);
 191   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x23 & 0xFF); 
 192   3      
 193   3                      break;
 194   3      
 195   3                  /*  信号                 */
 196   3                  case 0x2d:    
 197   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x2d >> 8);
 198   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x2d & 0xFF); 
 199   3      
 200   3                      break;
 201   3      
 202   3                  /*  校准图类型                 */
 203   3                  case 0x30:   
 204   3                      modbus5.byte_info_H  = (uint8_t)(hansen.addr_0x30 >> 8);
 205   3                      modbus5.byte_info_L  = (uint8_t)(hansen.addr_0x30 & 0xFF); 
 206   3      
 207   3                      break; 
 208   3      
 209   3                  default:
 210   3                      break;
 211   3              }
 212   2              rs485_5.TX_buf[modbus5.send_val_addr++] = modbus5.byte_info_H;
 213   2              rs485_5.TX_buf[modbus5.send_val_addr++] = modbus5.byte_info_L;
 214   2          }
 215   1          slave_to_master(0x03,3 + modbus5.byte_cnt);
 216   1          if( hansen.connect_flag == 0 )
 217   1          {
 218   2              hansen.connect_flag = 1;
 219   2              Write_Dgus(0x2025,1);
 220   2          }
 221   1          
 222   1      }
 223          
 224          void Modbus_Fun06( void )
 225          {
 226   1          switch(rs485_5.RX_buf[3])
 227   1          {
 228   2              /*  马达操作                      */
 229   2              case 0x20:                         
 230   2                  hansen.addr_0x20 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 231   2      
 232   2                  break;  
 233   2      
 234   2              /*  喷头操作                       */    
 235   2              case 0x21:
 236   2                  hansen.addr_0x21 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 237   2      
 238   2                  break;
 239   2      
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 5   

 240   2              /*  喷头强度                  */
 241   2              case 0x22:    
 242   2                  hansen.addr_0x22 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 243   2      
 244   2                  break;
 245   2      
 246   2              /*  喷头数量                 */
 247   2              case 0x23:   
 248   2                  hansen.addr_0x23 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 249   2      
 250   2                  break;
 251   2      
 252   2              /*  信号                 */
 253   2              case 0x2d:    
 254   2                  hansen.addr_0x2d = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 255   2      
 256   2                  break;
 257   2      
 258   2              /*  校准图类型                 */
 259   2              case 0x30:   
 260   2                  hansen.addr_0x30 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 261   2      
 262   2                  break;
 263   2      
 264   2              // /*                    */
 265   2              // case 0x100:   
 266   2              //     //hansen.addr_0x2 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 267   2      
 268   2              //     break;
 269   2      
 270   2              // /*                    */
 271   2              // case 0x101:    
 272   2              //     //hansen.addr_0x24 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 273   2      
 274   2              //     break;
 275   2       
 276   2              // /*                    */
 277   2              // case 0x102:   
 278   2              //     //hansen.addr_0x25 = (rs485_5.RX_buf[4] << 8) | rs485_5.RX_buf[5]; 
 279   2      
 280   2              //     break;
 281   2      
 282   2              default:
 283   2                  break;   
 284   2          }
 285   1      
 286   1          slave_to_master(FUN_06,8);
 287   1      
 288   1      }
 289          
 290          /**
 291           * @brief 写多个输出寄存器  16
 292           *
 293           * @param   void
 294           *
 295           * @return  void 
 296          **/
 297          void Modbus_Fun16( void )
 298          {
 299   1          uint16_t i;
 300   1          static uint8_t chip_id[32] = {0};
 301   1          static uint8_t FW_set[32] = {0};
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 6   

 302   1          static uint8_t FW_params[32] = {0};
 303   1          static uint8_t HS_version[30] = {0};
 304   1          static uint8_t renwu_name[32] = {0};
 305   1          static uint8_t dayin_mode[20] = {0};
 306   1      
 307   1          modbus5.rcv_value_addr = 7;                  //DATA1 H位置
 308   1          modbus5.byte_cnt   = rs485_5.RX_buf[6];
 309   1          modbus5.start_addr = rs485_5.RX_buf[2]<<8 | rs485_5.RX_buf[3];
 310   1      
 311   1          for( i = modbus5.start_addr; i < modbus5.start_addr + modbus5.byte_cnt/2; i++)
 312   1          {
 313   2              modbus5.byte_info_H = rs485_5.RX_buf[modbus5.rcv_value_addr];
 314   2              modbus5.byte_info_L = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 315   2              switch (i)
 316   2              {
 317   3                  /*  40001  24V LED开关状态设置                  */
 318   3                  case 0:
 319   3      
 320   3      
 321   3                      break;
 322   3                  
 323   3                  /*  40002  两路PWM 开关状态及风速设置           */
 324   3                  case 1:
 325   3      
 326   3      
 327   3                      break;
 328   3      
 329   3                  /*  40003  220V 开关设置                        */
 330   3                  case 2:
 331   3      
 332   3                      break;
 333   3      
 334   3                  /*  40004  烘干功率及风扇档位 设置              */
 335   3                  case 3:
 336   3      
 337   3      
 338   3                      break;
 339   3      
 340   3                  /*  40005  NTC1 NTC2 alarm value 设置           */
 341   3                  case 4:
 342   3      
 343   3      
 344   3                      break;
 345   3                  
 346   3                  /*  40006  NTC3 alarm value 设置                */
 347   3                  case 5:
 348   3      
 349   3      
 350   3                      break;
 351   3      
 352   3                  /*  40007  同步开关设置                         */
 353   3                  case 0x0100:
 354   3                      hansen.addr_0x0100 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 355   3      
 356   3                      switch(hansen.addr_0x0100)
 357   3                      {
 358   4                          
 359   4                          case 0:         hansen.addr_0x21 = 0;    hansen.addr_0x20 = 0;            break;      
             -//停止装墨    
 360   4                          case 2:         hansen.addr_0x20 = 0;         
 361   4                                          Write_Dgus(0x2020,0);                                                 
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 7   

             -        break;      //复位 
 362   4                                    
 363   4                          case 3:         hansen.addr_0x30 = 0;                                     break;      
             -//打印       
 364   4                          case 6:         hansen.addr_0x21 = 0;    hansen.addr_0x22 = 0;    hansen.addr_0x23 = 0
             -;   
 365   4                                                                           break;      //清洗 
 366   4                                          
 367   4                          case 10:        hansen.addr_0x21 = 0;    hansen.addr_0x23 = 0;
 368   4                                                                          break;      //开始装墨
 369   4                          case 12:        hansen.addr_0x20 = 0;                                     break;      
             -//开始装墨
 370   4                          default:                                                                  break;
 371   4                      }
 372   3      
 373   3                      break;
 374   3      
 375   3                  /*  40007  同步开关设置                         */
 376   3                  case 0x0102:
 377   3                      hansen.addr_0x0102 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 378   3      
 379   3                      switch(hansen.addr_0x0102)
 380   3                      { 
 381   4                          case 0:         Write_Dgusii_Vp_byChar(0x1600,"  空闲  ",8); 
 382   4                                          if( hansen.ctrl_flag == 0 )
 383   4                                          {
 384   5                                              hansen.ctrl_flag = 1;
 385   5                                              jump_page(0);
 386   5                                          }     
 387   4                                          break;
 388   4                          case 1:         if( hansen.ctrl_flag == 0 )
 389   4                                          {
 390   5                                              Write_Dgusii_Vp_byChar(0x1600," 初始化 ",8);
 391   5                                          }
 392   4                                          break;     
 393   4                          case 2:         Write_Dgusii_Vp_byChar(0x1600,"  打印  ",8);       jump_page(11);  bre
             -ak;
 394   4                          case 3:         Write_Dgusii_Vp_byChar(0x1600,"  恢复  ",8);        break;      //停止
             -装墨    
 395   4                          case 4:         Write_Dgusii_Vp_byChar(0x1600,"  暂停  ",8);        break;
 396   4                          case 5:         Write_Dgusii_Vp_byChar(0x1600,"印中清洗",8);     break;
 397   4                          case 6:         Write_Dgusii_Vp_byChar(0x1600,"  保湿  ",8);        break;      //停止
             -装墨    
 398   4                          case 7:         Write_Dgusii_Vp_byChar(0x1600,"其他动作",8);     break;
 399   4                          default:                                            break;
 400   4                      }
 401   3      
 402   3                      break;
 403   3      
 404   3                  case 0x0110:
 405   3                      hansen.addr_0x0110 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 406   3                      Write_Dgus(0x20ce,hansen.addr_0x0110);   
 407   3                      break;
 408   3      
 409   3                  case 0x0111:
 410   3                      hansen.addr_0x0111 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 411   3                      Write_Dgus(0x20cd,hansen.addr_0x0111); 
 412   3                      break;
 413   3      
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 8   

 414   3                  case 0x0112:
 415   3                      hansen.addr_0x0112 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 416   3                      Write_Dgus(0x20c0,hansen.addr_0x0112); 
 417   3                      break;   
 418   3      
 419   3                  case 0x0114:
 420   3                      hansen.addr_0x0114 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 421   3                      Write_Dgus(0x20c2,hansen.addr_0x0114); 
 422   3                      break; 
 423   3      
 424   3                  case 0x011a:
 425   3                      hansen.addr_0x011a = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 426   3                      Write_Dgus(0x20c4,hansen.addr_0x011a); 
 427   3                      break;
 428   3      
 429   3                  case 0x011c:
 430   3                      hansen.addr_0x011c = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1]; 
 431   3                      Write_Dgus(0x20c6,hansen.addr_0x011c); 
 432   3                      break;
 433   3      
 434   3                  case 0x0120:
 435   3                      dayin_mode[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 436   3                      dayin_mode[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 437   3                      break;
 438   3                  case 0x0121:
 439   3                      dayin_mode[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 440   3                      dayin_mode[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 441   3                      break;
 442   3                  case 0x0122:
 443   3                      dayin_mode[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 444   3                      dayin_mode[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 445   3                      break;
 446   3                  case 0x0123:
 447   3                      dayin_mode[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 448   3                      dayin_mode[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 449   3                      break;
 450   3                  case 0x0124:
 451   3                      dayin_mode[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 452   3                      dayin_mode[9] = rs485_5.RX_buf[modbus5.rcv_value_addr]; 
 453   3                      Write_Dgusii_Vp_byChar(0x20b0,dayin_mode,10);           
 454   3                      break;
 455   3      
 456   3                  case 0x0134:
 457   3                      hansen.addr_0x0134 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 458   3                      time_trans(hansen.addr_0x0134,0);
 459   3      
 460   3                      Write_Dgus(0x20d0,dayin_t.cnt_h); 
 461   3                      Write_Dgus(0x20d1,dayin_t.cnt_min); 
 462   3                      Write_Dgus(0x20d2,dayin_t.cnt_s); 
 463   3                      break;
 464   3      
 465   3                  case 0x0136:
 466   3                      hansen.addr_0x0136 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 467   3                      time_trans(hansen.addr_0x0136,1);
 468   3      
 469   3                      Write_Dgus(0x20d3,dayin_t.remain_h); 
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 9   

 470   3                      Write_Dgus(0x20d4,dayin_t.remain_min); 
 471   3                      Write_Dgus(0x20d5,dayin_t.remain_s); 
 472   3                      break;
 473   3      
 474   3                  case 0x0138:
 475   3                      hansen.addr_0x0138 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 476   3      
 477   3                      Write_Dgus(0x20cc,hansen.addr_0x0138); 
 478   3                      break;
 479   3      
 480   3                  case 0x013a:
 481   3                      hansen.addr_0x013a = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 482   3      
 483   3                      Write_Dgus(0x20c9,hansen.addr_0x013a); 
 484   3                      break;
 485   3      
 486   3                  case 0x013c:
 487   3                      hansen.addr_0x013c = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 488   3                      if( hansen.addr_0x013c == 100 )
 489   3                      {
 490   4                          jump_page(0); 
 491   4                      }
 492   3                      Write_Dgus(0x20d9,hansen.addr_0x013c); 
 493   3                      break;
 494   3      
 495   3                  case 0x0140:
 496   3                      renwu_name[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 497   3                      renwu_name[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 498   3                      break;
 499   3                  case 0x0141:
 500   3                      renwu_name[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 501   3                      renwu_name[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 502   3                      break;
 503   3                  case 0x0142:
 504   3                      renwu_name[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 505   3                      renwu_name[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 506   3                      break;
 507   3                  case 0x0143:
 508   3                      renwu_name[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 509   3                      renwu_name[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 510   3                      break;
 511   3                  case 0x0144:
 512   3                      renwu_name[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 513   3                      renwu_name[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 514   3                      break;
 515   3                  case 0x0145:
 516   3                      renwu_name[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 517   3                      renwu_name[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 518   3                      break;
 519   3      
 520   3                  case 0x0146:
 521   3                      renwu_name[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 522   3                      renwu_name[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 523   3                      break;
 524   3                  case 0x0147:
 525   3                      renwu_name[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 526   3                      renwu_name[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 527   3                      break;
 528   3                  case 0x0148:
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 10  

 529   3                      renwu_name[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 530   3                      renwu_name[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 531   3                      break;
 532   3                  case 0x0149:
 533   3                      renwu_name[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 534   3                      renwu_name[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];     
 535   3                      //Write_Dgusii_Vp_byChar(0x20f0,renwu_name,20);   
 536   3                        
 537   3                      break;
 538   3      
 539   3                  case 0x0156:
 540   3                      hansen.addr_0x0156_H = rs485_5.RX_buf[modbus5.rcv_value_addr];
 541   3                      hansen.addr_0x0156_L = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 542   3                      Write_Dgus(0x2080,hansen.addr_0x0156_L);     
 543   3                      Write_Dgus(0x2082,hansen.addr_0x0156_H);    
 544   3                      break;
 545   3                      
 546   3                  case 0x0157:
 547   3                      hansen.addr_0x0157_H = rs485_5.RX_buf[modbus5.rcv_value_addr];
 548   3                      hansen.addr_0x0157_L = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 549   3                      Write_Dgus(0x2084,hansen.addr_0x0157_L);     
 550   3                      Write_Dgus(0x2086,hansen.addr_0x0157_H);    
 551   3                      break;
 552   3      
 553   3                  case 0x0158:
 554   3                      hansen.addr_0x00 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 555   3                      Write_Dgus(0x2060,hansen.addr_0x00);     
 556   3                      break;
 557   3      
 558   3                  case 0x015a:
 559   3                      hansen.addr_0x02 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 560   3                      Write_Dgus(0x2062,hansen.addr_0x02);  
 561   3                      break;
 562   3      
 563   3                  case 0x015e:
 564   3                      hansen.addr_0x06 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 565   3                      
 566   3                      hansen.addr_0x06_02 = hansen.addr_0x06 & 0x04;
 567   3                      if( hansen.addr_0x06_02 == 4 )
 568   3                      {
 569   4                          hansen.addr_0x06_02 = 3;
 570   4                      }
 571   3                      hansen.addr_0x06_35 = (hansen.addr_0x06 & 0x38) >> 3;
 572   3                      if( hansen.addr_0x06_35 == 4 )
 573   3                      {
 574   4                          hansen.addr_0x06_35 = 3;
 575   4                      }
 576   3                      hansen.addr_0x06_67 = (hansen.addr_0x06 & 0xc0) >> 6;
 577   3                      hansen.addr_0x06_8a = (hansen.addr_0x06 & 0x0700) >> 8;
 578   3                      if( hansen.addr_0x06_8a == 4 )
 579   3                      {
 580   4                          hansen.addr_0x06_8a = 3;
 581   4                      }
 582   3                      hansen.addr_0x06_bc = (hansen.addr_0x06 & 0x1800) >> 11;
 583   3      
 584   3                      Write_Dgus(0x2051,hansen.addr_0x06_02);  
 585   3                      Write_Dgus(0x2052,hansen.addr_0x06_35);
 586   3                      Write_Dgus(0x2053,hansen.addr_0x06_67);
 587   3                      Write_Dgus(0x2054,hansen.addr_0x06_8a);    
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 11  

 588   3                      Write_Dgus(0x2055,hansen.addr_0x06_bc);   
 589   3                      break;
 590   3      
 591   3                  case 0x015f:
 592   3                      hansen.addr_yuhua = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5
             -.rcv_value_addr + 1];
 593   3      
 594   3                      break;
 595   3      
 596   3                  case 0x0160:
 597   3                      hansen.addr_sjpt = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 598   3      
 599   3                      break;
 600   3      
 601   3                  case 0x0161:
 602   3                      hansen.addr_0x22 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 603   3                      if( hansen.addr_0x22 == 4)
 604   3                      {
 605   4                          hansen.addr_0x22 = 3;
 606   4                      }
 607   3                      Write_Dgus(0x2022,hansen.addr_0x22);
 608   3                      hansen.addr_0x22 = 0;    
 609   3                      break;
 610   3      
 611   3                  case 0x0162:
 612   3                      hansen.addr_0x23 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus5.
             -rcv_value_addr + 1];
 613   3                      Write_Dgus(0x2023,hansen.addr_0x23);
 614   3                      hansen.addr_0x23 = 0;  
 615   3                      break;
 616   3      
 617   3                  case 0x0150:
 618   3                      hansen.addr_0x0150 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 619   3                      break;
 620   3      
 621   3                  case 0x0151:
 622   3                      hansen.addr_0x0151 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 623   3                      Write_Dgus(0x2070,hansen.addr_0x0151);
 624   3                      Write_Dgus(0x2071,hansen.addr_0x0150);
 625   3                      break;
 626   3      
 627   3                  case 0x0152:
 628   3                      hansen.addr_0x0152 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 629   3                      break;
 630   3      
 631   3                  case 0x0153:
 632   3                      hansen.addr_0x0153 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 633   3                      // Write_Dgus(0x2072,hansen.addr_0x0153);
 634   3                      // Write_Dgus(0x2073,hansen.addr_0x0152);
 635   3                      break;
 636   3      
 637   3                  case 0x0154:
 638   3                      hansen.addr_0x0154 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 639   3                      break;
 640   3      
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 12  

 641   3                  case 0x0155:
 642   3                      hansen.addr_0x0155 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 643   3                      // Write_Dgus(0x2074,hansen.addr_0x0155);
 644   3                      // Write_Dgus(0x2075,hansen.addr_0x0154);
 645   3                      break;
 646   3                  /*  40007  同步开关设置                         */
 647   3                  case 0x0169:
 648   3                      hansen.addr_0x0169 = (rs485_5.RX_buf[modbus5.rcv_value_addr] << 8) | rs485_5.RX_buf[modbus
             -5.rcv_value_addr + 1];
 649   3      
 650   3                      switch(hansen.addr_0x0169)
 651   3                      {
 652   4                          
 653   4                          case 0  :         hansen.addr_0x10 |= 0x20;           break;         
 654   4                          
 655   4                          default:                                            break;
 656   4                      }
 657   3      
 658   3                      break;
 659   3      
 660   3                  case 0x0170:
 661   3                      HS_version[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 662   3                      HS_version[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 663   3                      break;
 664   3                  case 0x0171:
 665   3                      HS_version[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 666   3                      HS_version[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 667   3                      break;
 668   3                  case 0x0172:
 669   3                      HS_version[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 670   3                      HS_version[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 671   3                      break;
 672   3                  case 0x0173:
 673   3                      HS_version[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 674   3                      HS_version[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 675   3                      break;
 676   3                  case 0x0174:
 677   3                      HS_version[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 678   3                      HS_version[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 679   3                      break;
 680   3                  case 0x0175:
 681   3                      HS_version[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 682   3                      HS_version[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 683   3                      break;
 684   3      
 685   3                  case 0x0176:
 686   3                      HS_version[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 687   3                      HS_version[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 688   3                      break;
 689   3                  case 0x0177:
 690   3                      HS_version[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 691   3                      HS_version[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 692   3                      break;
 693   3                  case 0x0178:
 694   3                      HS_version[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 695   3                      HS_version[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 696   3                      break;
 697   3                  case 0x0179:
 698   3                      HS_version[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 699   3                      HS_version[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 700   3                      break;
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 13  

 701   3                  case 0x017a:
 702   3                      HS_version[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 703   3                      HS_version[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 704   3                      break;
 705   3                  case 0x017b:
 706   3                      HS_version[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 707   3                      HS_version[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 708   3                      break;
 709   3                  case 0x017c:
 710   3                      HS_version[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 711   3                      HS_version[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 712   3                      break;
 713   3                  case 0x017d:
 714   3                      HS_version[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 715   3                      HS_version[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 716   3                      break;
 717   3      
 718   3                  case 0x017e:
 719   3                      HS_version[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 720   3                      HS_version[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];   
 721   3                      Write_Dgusii_Vp_byChar(0x1630,HS_version,30);       
 722   3                      break;
 723   3      
 724   3                  case 0x0190:
 725   3                      chip_id[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 726   3                      chip_id[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 727   3                      break;
 728   3                  case 0x0191:
 729   3                      chip_id[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 730   3                      chip_id[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 731   3                      break;
 732   3                  case 0x0192:
 733   3                      chip_id[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 734   3                      chip_id[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 735   3                      break;
 736   3                  case 0x0193:
 737   3                      chip_id[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 738   3                      chip_id[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 739   3                      break;
 740   3                  case 0x0194:
 741   3                      chip_id[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 742   3                      chip_id[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 743   3                      break;
 744   3                  case 0x0195:
 745   3                      chip_id[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 746   3                      chip_id[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 747   3                      break;
 748   3      
 749   3                  case 0x0196:
 750   3                      chip_id[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 751   3                      chip_id[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 752   3                      break;
 753   3                  case 0x0197:
 754   3                      chip_id[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 755   3                      chip_id[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 756   3                      break;
 757   3                  case 0x0198:
 758   3                      chip_id[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 759   3                      chip_id[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 760   3                      break;
 761   3                  case 0x0199:
 762   3                      chip_id[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 14  

 763   3                      chip_id[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 764   3                      break;
 765   3                  case 0x019a:
 766   3                      chip_id[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 767   3                      chip_id[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 768   3                      break;
 769   3                  case 0x019b:
 770   3                      chip_id[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 771   3                      chip_id[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 772   3                      break;
 773   3                  case 0x019c:
 774   3                      chip_id[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 775   3                      chip_id[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 776   3                      break;
 777   3                  case 0x019d:
 778   3                      chip_id[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 779   3                      chip_id[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 780   3                      break;
 781   3      
 782   3                  case 0x019e:
 783   3                      chip_id[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 784   3                      chip_id[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 785   3                      break;
 786   3                  case 0x019f:
 787   3                      chip_id[30] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 788   3                      chip_id[31] = rs485_5.RX_buf[modbus5.rcv_value_addr];
 789   3                      Write_Dgusii_Vp_byChar(0x1650,chip_id,32);   
 790   3                      break;
 791   3      
 792   3                  case 0x01c0:
 793   3                      FW_set[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 794   3                      FW_set[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 795   3                      break;
 796   3                  case 0x01C1:
 797   3                      FW_set[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 798   3                      FW_set[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 799   3                      break;
 800   3                  case 0x01C2:
 801   3                      FW_set[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 802   3                      FW_set[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 803   3                      break;
 804   3                  case 0x01C3:
 805   3                      FW_set[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 806   3                      FW_set[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 807   3                      break;
 808   3                  case 0x01C4:
 809   3                      FW_set[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 810   3                      FW_set[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 811   3                      break;
 812   3                  case 0x01C5:
 813   3                      FW_set[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 814   3                      FW_set[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 815   3                      break;
 816   3      
 817   3                  case 0x01C6:
 818   3                      FW_set[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 819   3                      FW_set[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 820   3                      break;
 821   3                  case 0x01C7:
 822   3                      FW_set[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 823   3                      FW_set[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 824   3                      break;
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 15  

 825   3                  case 0x01C8:
 826   3                      FW_set[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 827   3                      FW_set[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 828   3                      break;
 829   3                  case 0x01C9:
 830   3                      FW_set[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 831   3                      FW_set[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 832   3                      break;
 833   3                  case 0x01Ca:
 834   3                      FW_set[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 835   3                      FW_set[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 836   3                      break;
 837   3                  case 0x01Cb:
 838   3                      FW_set[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 839   3                      FW_set[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 840   3                      break;
 841   3                  case 0x01Cc:
 842   3                      FW_set[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 843   3                      FW_set[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 844   3                      break;
 845   3                  case 0x01Cd:
 846   3                      FW_set[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 847   3                      FW_set[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 848   3                      break;
 849   3      
 850   3                  case 0x01Ce:
 851   3                      FW_set[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 852   3                      FW_set[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 853   3                      break;
 854   3                  case 0x01Cf:
 855   3                      FW_set[30] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 856   3                      FW_set[31] = rs485_5.RX_buf[modbus5.rcv_value_addr];
 857   3                      Write_Dgusii_Vp_byChar(0x1670,FW_set,32);   
 858   3                      break;
 859   3      
 860   3                  case 0x01D0:
 861   3                      FW_params[0] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 862   3                      FW_params[1] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 863   3                      break;
 864   3                  case 0x01D1:
 865   3                      FW_params[2] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 866   3                      FW_params[3] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 867   3                      break;
 868   3                  case 0x01D2:
 869   3                      FW_params[4] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 870   3                      FW_params[5] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 871   3                      break;
 872   3                  case 0x01D3:
 873   3                      FW_params[6] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 874   3                      FW_params[7] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 875   3                      break;
 876   3                  case 0x01D4:
 877   3                      FW_params[8] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 878   3                      FW_params[9] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 879   3                      break;
 880   3                  case 0x01D5:
 881   3                      FW_params[10] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 882   3                      FW_params[11] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 883   3                      break;
 884   3      
 885   3                  case 0x01D6:
 886   3                      FW_params[12] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 16  

 887   3                      FW_params[13] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 888   3                      break;
 889   3                  case 0x01D7:
 890   3                      FW_params[14] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 891   3                      FW_params[15] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 892   3                      break;
 893   3                  case 0x01D8:
 894   3                      FW_params[16] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 895   3                      FW_params[17] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 896   3                      break;
 897   3                  case 0x01D9:
 898   3                      FW_params[18] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 899   3                      FW_params[19] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 900   3                      break;
 901   3                  case 0x01Da:
 902   3                      FW_params[20] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 903   3                      FW_params[21] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 904   3                      break;
 905   3                  case 0x01Db:
 906   3                      FW_params[22] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 907   3                      FW_params[23] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 908   3                      break;
 909   3                  case 0x01Dc:
 910   3                      FW_params[24] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 911   3                      FW_params[25] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 912   3                      break;
 913   3                  case 0x01Dd:
 914   3                      FW_params[26] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 915   3                      FW_params[27] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 916   3                      break;
 917   3      
 918   3                  case 0x01De:
 919   3                      FW_params[28] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 920   3                      FW_params[29] = rs485_5.RX_buf[modbus5.rcv_value_addr];        
 921   3                      break;
 922   3                  case 0x01Df:
 923   3                      FW_params[30] = rs485_5.RX_buf[modbus5.rcv_value_addr + 1];
 924   3                      FW_params[31] = rs485_5.RX_buf[modbus5.rcv_value_addr];
 925   3                      Write_Dgusii_Vp_byChar(0x1690,FW_params,32);   
 926   3                      break;    
 927   3                  default:
 928   3                      break;
 929   3              }
 930   2              modbus5.rcv_value_addr += 2;         //从Value1_H →→ 从Value2_H
 931   2          }
 932   1          
 933   1          slave_to_master(FUN_16,8);  
 934   1      
 935   1      }
 936          
 937          /**
 938           * @brief 写单个输出寄存器-06
 939           *
 940           * @param   reg_addr：要写的寄存器地址
 941           *          reg_val： 要写的值
 942           *
 943           * @return  void
 944           */
 945          void write_slave_06( uint8_t uart_num, uint16_t reg_addr, uint8_t reg_val_H, uint8_t reg_val_L)
 946          {
 947   1          uint8_t send_buf[8];
 948   1          uint16_t crc;
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 17  

 949   1      
 950   1          delay_ms(10);
 951   1          download_flag = 0;
 952   1      
 953   1          send_buf[0] = SLAVE_ADDR;       //Addr
 954   1          send_buf[1] = FUN_06;           //Fun
 955   1      
 956   1          /*   Value_H  && Value_L    */
 957   1          send_buf[2] = reg_addr >> 8;
 958   1          send_buf[3] = reg_addr;
 959   1          send_buf[4] = reg_val_H ;
 960   1          send_buf[5] = reg_val_L;
 961   1      
 962   1          /*   crc    */
 963   1          crc = MODBUS_CRC16(send_buf,6);
 964   1          send_buf[6] = crc >> 8;
 965   1          send_buf[7] = crc;
 966   1      
 967   1          memcpy(rs485_5.TX_buf,send_buf,8);
 968   1          /*   发送，后使能接收    */
 969   1          rs485_5.TX_send_bytelength = 8;
 970   1      
 971   1          TR5 = 1;
 972   1      
 973   1          delay_ms(2);
 974   1          SCON3T |= S5TI;                             //开始发送
 975   1          delay_ms(1);
 976   1      }
*** WARNING C280 IN LINE 945 OF ..\Emembed\Src\modbus.c: 'uart_num': unreferenced local variable
 977          
 978          
 979          /**
 980           * @brief 从机回复主机
 981           *  
 982           * @param   code_num:功能码       
 983           * @param   length:数据长度        
 984           * 
 985            @return  crc16:crc校验的值 2byte
 986           */
 987          void slave_to_master(uint8_t code_num, uint8_t length)
 988          {
 989   1          uint16_t crc;
 990   1      
 991   1          switch(code_num)
 992   1          {
 993   2              case 0x03:
 994   2                  crc = MODBUS_CRC16(rs485_5.TX_buf,length);
 995   2      
 996   2                  // rs485_5.TX_buf[length+1] = crc;             //CRC H
 997   2                  // rs485_5.TX_buf[length] = crc>>8;            //CRC L
 998   2      
 999   2                  rs485_5.TX_buf[length] = crc;             //CRC H
1000   2                  rs485_5.TX_buf[length+1] = crc>>8;            //CRC L
1001   2                  
1002   2                  rs485_5.TX_send_bytelength = length + 2;
1003   2                  
1004   2                  break;
1005   2      
1006   2              case 0x04:
1007   2                  crc = MODBUS_CRC16(rs485_5.TX_buf,length);
1008   2      
1009   2                  rs485_5.TX_buf[length+1] = crc;              //CRC H
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 18  

1010   2                  rs485_5.TX_buf[length] = crc>>8;             //CRC L
1011   2      
1012   2                  rs485_5.TX_send_bytelength = length + 2;
1013   2                  
1014   2                  break;    
1015   2      
1016   2              case 0x06:
1017   2                  memcpy(rs485_5.TX_buf,rs485_5.RX_buf,length);
1018   2                  rs485_5.TX_send_bytelength = length;
1019   2      
1020   2                  break;    
1021   2      
1022   2              case 0x10:
1023   2                  memcpy(rs485_5.TX_buf,rs485_5.RX_buf,6);
1024   2              
1025   2                  crc = MODBUS_CRC16(rs485_5.TX_buf,6);
1026   2      
1027   2                  rs485_5.TX_buf[6] = crc;                 //CRC H
1028   2                  rs485_5.TX_buf[7] = crc>>8;              //CRC L
1029   2              
1030   2                  rs485_5.TX_send_bytelength = length;
1031   2                  
1032   2                  break; 
1033   2      
1034   2              default:
1035   2                  break;
1036   2          }
1037   1      
1038   1          TR5 = 1;                                //485可以发送
1039   1          delay_ms(2);
1040   1          SCON3T |= S5TI;                             //开始发送
1041   1          delay_ms(1);
1042   1      }
1043          
1044          /**
1045           * @brief crc校验函数
1046           * 
1047           * @param   buf：  Address(1 byte) +Funtion(1 byte) ）+Data(n byte)   
1048           * @param   length:数据长度           
1049           * 
1050            @return  crc16:crc校验的值 2byte
1051           */
1052          uint16_t MODBUS_CRC16(uint8_t *buf, uint16_t length)
1053          {
1054   1        uint8_t i;
1055   1        uint16_t  crc16;
1056   1      
1057   1          /* 1, 预置16位CRC寄存器为0xffff（即全为1）                          */
1058   1        crc16 = 0xffff; 
1059   1      
1060   1        do
1061   1        {
1062   2              /* 2, 把8位数据与16位CRC寄存器的低位相异或，把结果放于CRC寄存器     */        
1063   2          crc16 ^= (uint16_t)*buf;    //
1064   2          for(i=0; i<8; i++)    
1065   2          {
1066   3                  /* 3, 如果最低位为1，把CRC寄存器的内容右移一位(朝低位)，用0填补最高位 再异或0xA001    */
1067   3            if(crc16 & 1)
1068   3                  {
1069   4                      crc16 = (crc16 >> 1) ^ 0xA001;
1070   4                  }
1071   3                  /* 4, 如果最低位为0，把CRC寄存器的内容右移一位(朝低位)，用0填补最高位                */
C51 COMPILER V9.60.7.0   MODBUS                                                            10/16/2025 17:12:37 PAGE 19  

1072   3                  else
1073   3                  {
1074   4                      crc16 >>= 1;
1075   4                  }   
1076   3          }
1077   2          buf++;
1078   2        }while(--length != 0);
1079   1      
1080   1        return  (crc16);
1081   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7177    ----
   CONSTANT SIZE    =     87    ----
   XDATA SIZE       =    187      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
