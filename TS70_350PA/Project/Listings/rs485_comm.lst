C51 COMPILER V9.60.7.0   RS485_COMM                                                        02/03/2025 19:27:49 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE RS485_COMM
OBJECT MODULE PLACED IN ..\Output\rs485_comm.obj
COMPILER INVOKED BY: D:\APP\Keil_STM32\C51\BIN\C51.EXE ..\BSP\Src\rs485_comm.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\
                    -BSP\Inc;..\Core\Inc;..\Driver;..\Emembed\Inc;..\SYSTEM\Inc) DEBUG OBJECTEXTEND PRINT(.\Listings\rs485_comm.lst) OBJECT(.
                    -.\Output\rs485_comm.obj)

line level    source

   1          #include "rs485_comm.h"
   2          
   3          RS485 rs485;
   4          
   5          /**
   6           * @brief       串口2中断处理函数
   7           *
   8           * @param   
   9           *
  10           * @return  void
  11          **/
  12          void Uart2_ISR() interrupt 8 
  13          {   
  14   1          /* 1, 检测到硬件将S2TI置1，即发送完毕                       */
  15   1          if( S2CON & S2TI )          //
  16   1          {
  17   2              /* 2, 软件将S2TI清零，等待发送标志位重置，可继续发送    */
  18   2              S2CON &= ~S2TI;         
  19   2              rs485.TX2_busy_Flag = 0;
  20   2              
  21   2              /* 3, 依次将TX2_buf中数据送出（写S2BUF操作即为发送）    */
  22   2              if( rs485.TX2_send_bytelength != 0 )
  23   2              {
  24   3                  S2BUF = rs485.TX2_buf[rs485.TX2_send_cnt++];
  25   3                  rs485.TX2_send_bytelength--;
  26   3              }else
  27   2              {
  28   3                  rs485.TX2_send_cnt = 0;
  29   3              }
  30   2          }
  31   1          
  32   1          /* 1, 检测到硬件将S2RI置1，即接收完毕                       */
  33   1          if( S2CON & S2RI )
  34   1          {
  35   2              /* 2, 软件将S2RI清零，等待接收标志位重置，可继续发送    */
  36   2              S2CON &= ~S2RI;
  37   2      
  38   2              /* 3, 判断数据包是否接收完毕                           */
  39   2              if( !rs485.RX2_rev_end_Flag )
  40   2              {
  41   3                  /* 4, 数据包大于RX_buf 则从头计数                  */
  42   3                  if( rs485.RX2_rev_cnt > 128 )
  43   3                  {
  44   4                      rs485.RX2_rev_cnt = 0;
  45   4                  }
  46   3      
  47   3                  /* 5, 依次将RX2_buf中数据接收（读S2BUF操作即为接收）*/
  48   3                  rs485.RX2_buf[rs485.RX2_rev_cnt] = S2BUF;
  49   3                  rs485.RX2_rev_cnt++;
  50   3              }
  51   2              /* 6, 重置接收完毕判断时间                              */
  52   2              rs485.RX2_rev_timeout = 50;
  53   2          }
C51 COMPILER V9.60.7.0   RS485_COMM                                                        02/03/2025 19:27:49 PAGE 2   

  54   1      }
  55          
  56          /**
  57           * @brief       是否接收完毕判断函数
  58           *
  59           * @param   
  60           *
  61           * @return  void
  62          **/
  63          void Tim0_ISR( void ) interrupt 1   //1ms
  64          {
  65   1          /* 1, 如果接收未超时                                             */
  66   1          if ( rs485.RX2_rev_timeout != 0 )  
  67   1          {
  68   2              rs485.RX2_rev_timeout--;
  69   2              /* 2, 如果接收超时                                          */
  70   2              if( rs485.RX2_rev_timeout == 0 )  
  71   2              {
  72   3                  if( rs485.RX2_rev_cnt > 0 )  
  73   3                  {   
  74   4                       /* 3, 接收完毕标志位亮起并初始化接收缓冲区         */
  75   4                      rs485.RX2_rev_end_Flag = 1;    
  76   4                  }
  77   3              }
  78   2          } 
  79   1      }
  80          
  81          /**
  82           * @brief       串口2发送1字节数据
  83           *
  84           * @param   
  85           *
  86           * @return  void
  87          **/
  88          void Uart2_Sendbyte( uint8_t dat )
  89          {
  90   1          while( rs485.TX2_busy_Flag );
  91   1          rs485.TX2_busy_Flag = 1;
  92   1          S2BUF = dat;
  93   1      
  94   1      }
  95          
  96          /**
  97           * @brief       串口2发送字符串
  98           *
  99           * @param   
 100           *
 101           * @return  void
 102          **/
 103          void Uart2_SendStr( uint8_t *sendstr )
 104          {   
 105   1          while(*sendstr)
 106   1          {
 107   2              Uart2_Sendbyte(*sendstr++);
 108   2          }
 109   1      }
 110          
 111          /**
 112           * @brief       串口2调用结构体初始化
 113           *
 114           * @param   
 115           *
C51 COMPILER V9.60.7.0   RS485_COMM                                                        02/03/2025 19:27:49 PAGE 3   

 116           * @return  void
 117          **/
 118          void Uart2_Send_Statu_Init( void )
 119          {
 120   1          rs485.TX2_busy_Flag = 0;
 121   1          rs485.RX2_rev_end_Flag = 0;
 122   1          rs485.TX2_buf[128] = 0;
 123   1          rs485.RX2_buf[128] = 0;
 124   1          rs485.TX2_send_bytelength = 0;
 125   1          rs485.TX2_send_cnt = 0;
 126   1          rs485.RX2_rev_timeout = 0;
 127   1          rs485.RX2_rev_cnt = 0;
 128   1      }
 129          
 130          // char putchar(char c)  // 串口重定向需要添加头文件stdio.h
 131          // {
 132          //     S2BUF = c;
 133          //     while(rs485.TX2_busy_Flag);
 134          //     rs485.TX2_busy_Flag = 1;
 135          //     return c;
 136          // }
 137          
 138          // /**
 139          //  * @brief    不定长数据接收测试函数
 140          //  *
 141          //  * @param   
 142          //  *
 143          //  * @return  void
 144          // **/
 145          // void uart2_test( void )
 146          // {
 147          //     if( rs485.RX2_rev_end_Flag == 1 )
 148          //     {
 149          //         rs485.RX2_rev_end_Flag = 0;
 150          //         if( rs485.RX2_buf[0]== 0x58 )
 151          //         {
 152          //             if ( rs485.RX2_buf[1] == 0x85 )
 153          //             {
 154          //                 Uart2_SendStr("receive success \r\n");
 155          //             }else
 156          //             {
 157          //                 Uart2_SendStr("receive error \r\n");
 158          //             }
 159                      
 160          //         }
 161          //     }
 162          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    280    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    264       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
